
free_rtos_led_blinking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004704  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08004894  08004894  00014894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004990  08004990  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004990  08004990  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004990  08004990  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004990  08004990  00014990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004994  08004994  00014994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004998  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000196c  20000010  080049a8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000197c  080049a8  0002197c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016d00  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a50  00000000  00000000  00036d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001250  00000000  00000000  00039790  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001118  00000000  00000000  0003a9e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002c48  00000000  00000000  0003baf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e2db  00000000  00000000  0003e740  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f614b  00000000  00000000  0004ca1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00142b66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bfc  00000000  00000000  00142be4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800487c 	.word	0x0800487c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800487c 	.word	0x0800487c

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f000 fa17 	bl	8000606 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f832 	bl	8000240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 f876 	bl	80002cc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001e0:	f001 fdd6 	bl	8001d90 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of led_blinking_0 */
  led_blinking_0Handle = osThreadNew(StartBlink01, NULL, &led_blinking_0_attributes);
 80001e4:	4a0d      	ldr	r2, [pc, #52]	; (800021c <main+0x4c>)
 80001e6:	2100      	movs	r1, #0
 80001e8:	480d      	ldr	r0, [pc, #52]	; (8000220 <main+0x50>)
 80001ea:	f001 fe3b 	bl	8001e64 <osThreadNew>
 80001ee:	4602      	mov	r2, r0
 80001f0:	4b0c      	ldr	r3, [pc, #48]	; (8000224 <main+0x54>)
 80001f2:	601a      	str	r2, [r3, #0]

  /* creation of led_blink_02 */
  led_blink_02Handle = osThreadNew(StartBlink02, NULL, &led_blink_02_attributes);
 80001f4:	4a0c      	ldr	r2, [pc, #48]	; (8000228 <main+0x58>)
 80001f6:	2100      	movs	r1, #0
 80001f8:	480c      	ldr	r0, [pc, #48]	; (800022c <main+0x5c>)
 80001fa:	f001 fe33 	bl	8001e64 <osThreadNew>
 80001fe:	4602      	mov	r2, r0
 8000200:	4b0b      	ldr	r3, [pc, #44]	; (8000230 <main+0x60>)
 8000202:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* creation of led_blink_03 */
  led_blink_03Handle = osThreadNew(startBlink03, NULL, &led_blink_03_attributes);
 8000204:	4a0b      	ldr	r2, [pc, #44]	; (8000234 <main+0x64>)
 8000206:	2100      	movs	r1, #0
 8000208:	480b      	ldr	r0, [pc, #44]	; (8000238 <main+0x68>)
 800020a:	f001 fe2b 	bl	8001e64 <osThreadNew>
 800020e:	4602      	mov	r2, r0
 8000210:	4b0a      	ldr	r3, [pc, #40]	; (800023c <main+0x6c>)
 8000212:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000214:	f001 fdf0 	bl	8001df8 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000218:	e7fe      	b.n	8000218 <main+0x48>
 800021a:	bf00      	nop
 800021c:	080048dc 	.word	0x080048dc
 8000220:	08000345 	.word	0x08000345
 8000224:	200018f0 	.word	0x200018f0
 8000228:	08004900 	.word	0x08004900
 800022c:	08000373 	.word	0x08000373
 8000230:	200018ec 	.word	0x200018ec
 8000234:	08004924 	.word	0x08004924
 8000238:	080003a1 	.word	0x080003a1
 800023c:	200018f4 	.word	0x200018f4

08000240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b096      	sub	sp, #88	; 0x58
 8000244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000246:	f107 0314 	add.w	r3, r7, #20
 800024a:	2244      	movs	r2, #68	; 0x44
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f004 fb0b 	bl	800486a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000254:	463b      	mov	r3, r7
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]
 8000260:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000262:	2310      	movs	r3, #16
 8000264:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000266:	2301      	movs	r3, #1
 8000268:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800026a:	2300      	movs	r3, #0
 800026c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800026e:	2360      	movs	r3, #96	; 0x60
 8000270:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000272:	2300      	movs	r3, #0
 8000274:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000276:	f107 0314 	add.w	r3, r7, #20
 800027a:	4618      	mov	r0, r3
 800027c:	f000 fd1a 	bl	8000cb4 <HAL_RCC_OscConfig>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <SystemClock_Config+0x4a>
  {
    Error_Handler();
 8000286:	f000 f8b5 	bl	80003f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028a:	230f      	movs	r3, #15
 800028c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800028e:	2300      	movs	r3, #0
 8000290:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000292:	2300      	movs	r3, #0
 8000294:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000296:	2300      	movs	r3, #0
 8000298:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029a:	2300      	movs	r3, #0
 800029c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800029e:	463b      	mov	r3, r7
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f001 f8ec 	bl	8001480 <HAL_RCC_ClockConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80002ae:	f000 f8a1 	bl	80003f4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002b6:	f000 fca7 	bl	8000c08 <HAL_PWREx_ControlVoltageScaling>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002c0:	f000 f898 	bl	80003f4 <Error_Handler>
  }
}
 80002c4:	bf00      	nop
 80002c6:	3758      	adds	r7, #88	; 0x58
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}

080002cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b086      	sub	sp, #24
 80002d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
 80002d8:	605a      	str	r2, [r3, #4]
 80002da:	609a      	str	r2, [r3, #8]
 80002dc:	60da      	str	r2, [r3, #12]
 80002de:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e0:	4b17      	ldr	r3, [pc, #92]	; (8000340 <MX_GPIO_Init+0x74>)
 80002e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002e4:	4a16      	ldr	r2, [pc, #88]	; (8000340 <MX_GPIO_Init+0x74>)
 80002e6:	f043 0301 	orr.w	r3, r3, #1
 80002ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002ec:	4b14      	ldr	r3, [pc, #80]	; (8000340 <MX_GPIO_Init+0x74>)
 80002ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002f0:	f003 0301 	and.w	r3, r3, #1
 80002f4:	603b      	str	r3, [r7, #0]
 80002f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80002f8:	2200      	movs	r2, #0
 80002fa:	2120      	movs	r1, #32
 80002fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000300:	f000 fc42 	bl	8000b88 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000304:	2200      	movs	r2, #0
 8000306:	2110      	movs	r1, #16
 8000308:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800030c:	f000 fc3c 	bl	8000b88 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET);
 8000310:	2200      	movs	r2, #0
 8000312:	2102      	movs	r1, #2
 8000314:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000318:	f000 fc36 	bl	8000b88 <HAL_GPIO_WritePin>
  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_4 | GPIO_PIN_1;
 800031c:	2332      	movs	r3, #50	; 0x32
 800031e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000320:	2301      	movs	r3, #1
 8000322:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000324:	2300      	movs	r3, #0
 8000326:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000328:	2300      	movs	r3, #0
 800032a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	4619      	mov	r1, r3
 8000330:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000334:	f000 fa80 	bl	8000838 <HAL_GPIO_Init>

}
 8000338:	bf00      	nop
 800033a:	3718      	adds	r7, #24
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	40021000 	.word	0x40021000

08000344 <StartBlink01>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800034c:	2120      	movs	r1, #32
 800034e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000352:	f000 fc31 	bl	8000bb8 <HAL_GPIO_TogglePin>
	  osDelay(500);
 8000356:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800035a:	f001 fe29 	bl	8001fb0 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800035e:	2120      	movs	r1, #32
 8000360:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000364:	f000 fc28 	bl	8000bb8 <HAL_GPIO_TogglePin>
	  osDelay(500);
 8000368:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800036c:	f001 fe20 	bl	8001fb0 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000370:	e7ec      	b.n	800034c <StartBlink01+0x8>

08000372 <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 8000372:	b580      	push	{r7, lr}
 8000374:	b082      	sub	sp, #8
 8000376:	af00      	add	r7, sp, #0
 8000378:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 800037a:	2110      	movs	r1, #16
 800037c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000380:	f000 fc1a 	bl	8000bb8 <HAL_GPIO_TogglePin>
	  osDelay(300);
 8000384:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000388:	f001 fe12 	bl	8001fb0 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 800038c:	2110      	movs	r1, #16
 800038e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000392:	f000 fc11 	bl	8000bb8 <HAL_GPIO_TogglePin>
	  osDelay(300);
 8000396:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800039a:	f001 fe09 	bl	8001fb0 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 800039e:	e7ec      	b.n	800037a <StartBlink02+0x8>

080003a0 <startBlink03>:

  /* USER CODE END StartBlink02 */
}

void startBlink03(void *argument)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80003a8:	2102      	movs	r1, #2
 80003aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ae:	f000 fc03 	bl	8000bb8 <HAL_GPIO_TogglePin>
		osDelay(700);
 80003b2:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80003b6:	f001 fdfb 	bl	8001fb0 <osDelay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80003ba:	2102      	movs	r1, #2
 80003bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003c0:	f000 fbfa 	bl	8000bb8 <HAL_GPIO_TogglePin>
		osDelay(700);
 80003c4:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80003c8:	f001 fdf2 	bl	8001fb0 <osDelay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80003cc:	e7ec      	b.n	80003a8 <startBlink03+0x8>
	...

080003d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a04      	ldr	r2, [pc, #16]	; (80003f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d101      	bne.n	80003e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80003e2:	f000 f929 	bl	8000638 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003e6:	bf00      	nop
 80003e8:	3708      	adds	r7, #8
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	40001000 	.word	0x40001000

080003f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
	...

08000404 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800040a:	4b11      	ldr	r3, [pc, #68]	; (8000450 <HAL_MspInit+0x4c>)
 800040c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800040e:	4a10      	ldr	r2, [pc, #64]	; (8000450 <HAL_MspInit+0x4c>)
 8000410:	f043 0301 	orr.w	r3, r3, #1
 8000414:	6613      	str	r3, [r2, #96]	; 0x60
 8000416:	4b0e      	ldr	r3, [pc, #56]	; (8000450 <HAL_MspInit+0x4c>)
 8000418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800041a:	f003 0301 	and.w	r3, r3, #1
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000422:	4b0b      	ldr	r3, [pc, #44]	; (8000450 <HAL_MspInit+0x4c>)
 8000424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000426:	4a0a      	ldr	r2, [pc, #40]	; (8000450 <HAL_MspInit+0x4c>)
 8000428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800042c:	6593      	str	r3, [r2, #88]	; 0x58
 800042e:	4b08      	ldr	r3, [pc, #32]	; (8000450 <HAL_MspInit+0x4c>)
 8000430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000436:	603b      	str	r3, [r7, #0]
 8000438:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800043a:	2200      	movs	r2, #0
 800043c:	210f      	movs	r1, #15
 800043e:	f06f 0001 	mvn.w	r0, #1
 8000442:	f000 f9cf 	bl	80007e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000446:	bf00      	nop
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	40021000 	.word	0x40021000

08000454 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b08c      	sub	sp, #48	; 0x30
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800045c:	2300      	movs	r3, #0
 800045e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000460:	2300      	movs	r3, #0
 8000462:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000464:	2200      	movs	r2, #0
 8000466:	6879      	ldr	r1, [r7, #4]
 8000468:	2036      	movs	r0, #54	; 0x36
 800046a:	f000 f9bb 	bl	80007e4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800046e:	2036      	movs	r0, #54	; 0x36
 8000470:	f000 f9d4 	bl	800081c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000474:	4b1e      	ldr	r3, [pc, #120]	; (80004f0 <HAL_InitTick+0x9c>)
 8000476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000478:	4a1d      	ldr	r2, [pc, #116]	; (80004f0 <HAL_InitTick+0x9c>)
 800047a:	f043 0310 	orr.w	r3, r3, #16
 800047e:	6593      	str	r3, [r2, #88]	; 0x58
 8000480:	4b1b      	ldr	r3, [pc, #108]	; (80004f0 <HAL_InitTick+0x9c>)
 8000482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000484:	f003 0310 	and.w	r3, r3, #16
 8000488:	60fb      	str	r3, [r7, #12]
 800048a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800048c:	f107 0210 	add.w	r2, r7, #16
 8000490:	f107 0314 	add.w	r3, r7, #20
 8000494:	4611      	mov	r1, r2
 8000496:	4618      	mov	r0, r3
 8000498:	f001 f980 	bl	800179c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800049c:	f001 f968 	bl	8001770 <HAL_RCC_GetPCLK1Freq>
 80004a0:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80004a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004a4:	4a13      	ldr	r2, [pc, #76]	; (80004f4 <HAL_InitTick+0xa0>)
 80004a6:	fba2 2303 	umull	r2, r3, r2, r3
 80004aa:	0c9b      	lsrs	r3, r3, #18
 80004ac:	3b01      	subs	r3, #1
 80004ae:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80004b0:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <HAL_InitTick+0xa4>)
 80004b2:	4a12      	ldr	r2, [pc, #72]	; (80004fc <HAL_InitTick+0xa8>)
 80004b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80004b6:	4b10      	ldr	r3, [pc, #64]	; (80004f8 <HAL_InitTick+0xa4>)
 80004b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004bc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80004be:	4a0e      	ldr	r2, [pc, #56]	; (80004f8 <HAL_InitTick+0xa4>)
 80004c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004c2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80004c4:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <HAL_InitTick+0xa4>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ca:	4b0b      	ldr	r3, [pc, #44]	; (80004f8 <HAL_InitTick+0xa4>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80004d0:	4809      	ldr	r0, [pc, #36]	; (80004f8 <HAL_InitTick+0xa4>)
 80004d2:	f001 f9f5 	bl	80018c0 <HAL_TIM_Base_Init>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d104      	bne.n	80004e6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80004dc:	4806      	ldr	r0, [pc, #24]	; (80004f8 <HAL_InitTick+0xa4>)
 80004de:	f001 fa25 	bl	800192c <HAL_TIM_Base_Start_IT>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e000      	b.n	80004e8 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80004e6:	2301      	movs	r3, #1
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	3730      	adds	r7, #48	; 0x30
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	40021000 	.word	0x40021000
 80004f4:	431bde83 	.word	0x431bde83
 80004f8:	200018f8 	.word	0x200018f8
 80004fc:	40001000 	.word	0x40001000

08000500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr

0800050e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000512:	e7fe      	b.n	8000512 <HardFault_Handler+0x4>

08000514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000518:	e7fe      	b.n	8000518 <MemManage_Handler+0x4>

0800051a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800051a:	b480      	push	{r7}
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800051e:	e7fe      	b.n	800051e <BusFault_Handler+0x4>

08000520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000524:	e7fe      	b.n	8000524 <UsageFault_Handler+0x4>

08000526 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000526:	b480      	push	{r7}
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800052a:	bf00      	nop
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr

08000534 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000538:	4802      	ldr	r0, [pc, #8]	; (8000544 <TIM6_DAC_IRQHandler+0x10>)
 800053a:	f001 fa21 	bl	8001980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	200018f8 	.word	0x200018f8

08000548 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800054c:	4b17      	ldr	r3, [pc, #92]	; (80005ac <SystemInit+0x64>)
 800054e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000552:	4a16      	ldr	r2, [pc, #88]	; (80005ac <SystemInit+0x64>)
 8000554:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000558:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800055c:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <SystemInit+0x68>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a13      	ldr	r2, [pc, #76]	; (80005b0 <SystemInit+0x68>)
 8000562:	f043 0301 	orr.w	r3, r3, #1
 8000566:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000568:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <SystemInit+0x68>)
 800056a:	2200      	movs	r2, #0
 800056c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800056e:	4b10      	ldr	r3, [pc, #64]	; (80005b0 <SystemInit+0x68>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a0f      	ldr	r2, [pc, #60]	; (80005b0 <SystemInit+0x68>)
 8000574:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000578:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800057c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800057e:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <SystemInit+0x68>)
 8000580:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000584:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000586:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <SystemInit+0x68>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a09      	ldr	r2, [pc, #36]	; (80005b0 <SystemInit+0x68>)
 800058c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000590:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000592:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <SystemInit+0x68>)
 8000594:	2200      	movs	r2, #0
 8000596:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000598:	4b04      	ldr	r3, [pc, #16]	; (80005ac <SystemInit+0x64>)
 800059a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800059e:	609a      	str	r2, [r3, #8]
#endif
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	e000ed00 	.word	0xe000ed00
 80005b0:	40021000 	.word	0x40021000

080005b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80005b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005ec <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80005b8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80005ba:	e003      	b.n	80005c4 <LoopCopyDataInit>

080005bc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80005be:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80005c0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80005c2:	3104      	adds	r1, #4

080005c4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80005c4:	480b      	ldr	r0, [pc, #44]	; (80005f4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80005c6:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80005c8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80005ca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80005cc:	d3f6      	bcc.n	80005bc <CopyDataInit>
	ldr	r2, =_sbss
 80005ce:	4a0b      	ldr	r2, [pc, #44]	; (80005fc <LoopForever+0x12>)
	b	LoopFillZerobss
 80005d0:	e002      	b.n	80005d8 <LoopFillZerobss>

080005d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80005d2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80005d4:	f842 3b04 	str.w	r3, [r2], #4

080005d8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80005d8:	4b09      	ldr	r3, [pc, #36]	; (8000600 <LoopForever+0x16>)
	cmp	r2, r3
 80005da:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80005dc:	d3f9      	bcc.n	80005d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005de:	f7ff ffb3 	bl	8000548 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005e2:	f004 f913 	bl	800480c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005e6:	f7ff fdf3 	bl	80001d0 <main>

080005ea <LoopForever>:

LoopForever:
    b LoopForever
 80005ea:	e7fe      	b.n	80005ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005ec:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80005f0:	08004998 	.word	0x08004998
	ldr	r0, =_sdata
 80005f4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80005f8:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 80005fc:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000600:	2000197c 	.word	0x2000197c

08000604 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000604:	e7fe      	b.n	8000604 <ADC1_2_IRQHandler>

08000606 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800060c:	2300      	movs	r3, #0
 800060e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000610:	2003      	movs	r0, #3
 8000612:	f000 f8dc 	bl	80007ce <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000616:	2000      	movs	r0, #0
 8000618:	f7ff ff1c 	bl	8000454 <HAL_InitTick>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d002      	beq.n	8000628 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000622:	2301      	movs	r3, #1
 8000624:	71fb      	strb	r3, [r7, #7]
 8000626:	e001      	b.n	800062c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000628:	f7ff feec 	bl	8000404 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800062c:	79fb      	ldrb	r3, [r7, #7]
}
 800062e:	4618      	mov	r0, r3
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800063c:	4b05      	ldr	r3, [pc, #20]	; (8000654 <HAL_IncTick+0x1c>)
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	4b05      	ldr	r3, [pc, #20]	; (8000658 <HAL_IncTick+0x20>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4413      	add	r3, r2
 8000646:	4a03      	ldr	r2, [pc, #12]	; (8000654 <HAL_IncTick+0x1c>)
 8000648:	6013      	str	r3, [r2, #0]
}
 800064a:	bf00      	nop
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	20001938 	.word	0x20001938
 8000658:	20000008 	.word	0x20000008

0800065c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  return uwTick;
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <HAL_GetTick+0x14>)
 8000662:	681b      	ldr	r3, [r3, #0]
}
 8000664:	4618      	mov	r0, r3
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20001938 	.word	0x20001938

08000674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	f003 0307 	and.w	r3, r3, #7
 8000682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800068a:	68ba      	ldr	r2, [r7, #8]
 800068c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000690:	4013      	ands	r3, r2
 8000692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800069c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006a6:	4a04      	ldr	r2, [pc, #16]	; (80006b8 <__NVIC_SetPriorityGrouping+0x44>)
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	60d3      	str	r3, [r2, #12]
}
 80006ac:	bf00      	nop
 80006ae:	3714      	adds	r7, #20
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006c0:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <__NVIC_GetPriorityGrouping+0x18>)
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	0a1b      	lsrs	r3, r3, #8
 80006c6:	f003 0307 	and.w	r3, r3, #7
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00

080006d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	db0b      	blt.n	8000702 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	f003 021f 	and.w	r2, r3, #31
 80006f0:	4907      	ldr	r1, [pc, #28]	; (8000710 <__NVIC_EnableIRQ+0x38>)
 80006f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f6:	095b      	lsrs	r3, r3, #5
 80006f8:	2001      	movs	r0, #1
 80006fa:	fa00 f202 	lsl.w	r2, r0, r2
 80006fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	e000e100 	.word	0xe000e100

08000714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	6039      	str	r1, [r7, #0]
 800071e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000724:	2b00      	cmp	r3, #0
 8000726:	db0a      	blt.n	800073e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	b2da      	uxtb	r2, r3
 800072c:	490c      	ldr	r1, [pc, #48]	; (8000760 <__NVIC_SetPriority+0x4c>)
 800072e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000732:	0112      	lsls	r2, r2, #4
 8000734:	b2d2      	uxtb	r2, r2
 8000736:	440b      	add	r3, r1
 8000738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800073c:	e00a      	b.n	8000754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4908      	ldr	r1, [pc, #32]	; (8000764 <__NVIC_SetPriority+0x50>)
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	f003 030f 	and.w	r3, r3, #15
 800074a:	3b04      	subs	r3, #4
 800074c:	0112      	lsls	r2, r2, #4
 800074e:	b2d2      	uxtb	r2, r2
 8000750:	440b      	add	r3, r1
 8000752:	761a      	strb	r2, [r3, #24]
}
 8000754:	bf00      	nop
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	e000e100 	.word	0xe000e100
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000768:	b480      	push	{r7}
 800076a:	b089      	sub	sp, #36	; 0x24
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	f003 0307 	and.w	r3, r3, #7
 800077a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	f1c3 0307 	rsb	r3, r3, #7
 8000782:	2b04      	cmp	r3, #4
 8000784:	bf28      	it	cs
 8000786:	2304      	movcs	r3, #4
 8000788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	3304      	adds	r3, #4
 800078e:	2b06      	cmp	r3, #6
 8000790:	d902      	bls.n	8000798 <NVIC_EncodePriority+0x30>
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	3b03      	subs	r3, #3
 8000796:	e000      	b.n	800079a <NVIC_EncodePriority+0x32>
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800079c:	f04f 32ff 	mov.w	r2, #4294967295
 80007a0:	69bb      	ldr	r3, [r7, #24]
 80007a2:	fa02 f303 	lsl.w	r3, r2, r3
 80007a6:	43da      	mvns	r2, r3
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	401a      	ands	r2, r3
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007b0:	f04f 31ff 	mov.w	r1, #4294967295
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ba:	43d9      	mvns	r1, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c0:	4313      	orrs	r3, r2
         );
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3724      	adds	r7, #36	; 0x24
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr

080007ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b082      	sub	sp, #8
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f7ff ff4c 	bl	8000674 <__NVIC_SetPriorityGrouping>
}
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	60b9      	str	r1, [r7, #8]
 80007ee:	607a      	str	r2, [r7, #4]
 80007f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007f6:	f7ff ff61 	bl	80006bc <__NVIC_GetPriorityGrouping>
 80007fa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	68b9      	ldr	r1, [r7, #8]
 8000800:	6978      	ldr	r0, [r7, #20]
 8000802:	f7ff ffb1 	bl	8000768 <NVIC_EncodePriority>
 8000806:	4602      	mov	r2, r0
 8000808:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800080c:	4611      	mov	r1, r2
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff ff80 	bl	8000714 <__NVIC_SetPriority>
}
 8000814:	bf00      	nop
 8000816:	3718      	adds	r7, #24
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff ff54 	bl	80006d8 <__NVIC_EnableIRQ>
}
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000838:	b480      	push	{r7}
 800083a:	b087      	sub	sp, #28
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000846:	e17f      	b.n	8000b48 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	2101      	movs	r1, #1
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	fa01 f303 	lsl.w	r3, r1, r3
 8000854:	4013      	ands	r3, r2
 8000856:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	2b00      	cmp	r3, #0
 800085c:	f000 8171 	beq.w	8000b42 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d00b      	beq.n	8000880 <HAL_GPIO_Init+0x48>
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	2b02      	cmp	r3, #2
 800086e:	d007      	beq.n	8000880 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000874:	2b11      	cmp	r3, #17
 8000876:	d003      	beq.n	8000880 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	2b12      	cmp	r3, #18
 800087e:	d130      	bne.n	80008e2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	689b      	ldr	r3, [r3, #8]
 8000884:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	2203      	movs	r2, #3
 800088c:	fa02 f303 	lsl.w	r3, r2, r3
 8000890:	43db      	mvns	r3, r3
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	4013      	ands	r3, r2
 8000896:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	68da      	ldr	r2, [r3, #12]
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	fa02 f303 	lsl.w	r3, r2, r3
 80008a4:	693a      	ldr	r2, [r7, #16]
 80008a6:	4313      	orrs	r3, r2
 80008a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	693a      	ldr	r2, [r7, #16]
 80008ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008b6:	2201      	movs	r2, #1
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	43db      	mvns	r3, r3
 80008c0:	693a      	ldr	r2, [r7, #16]
 80008c2:	4013      	ands	r3, r2
 80008c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	091b      	lsrs	r3, r3, #4
 80008cc:	f003 0201 	and.w	r2, r3, #1
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	fa02 f303 	lsl.w	r3, r2, r3
 80008d6:	693a      	ldr	r2, [r7, #16]
 80008d8:	4313      	orrs	r3, r2
 80008da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	693a      	ldr	r2, [r7, #16]
 80008e0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	f003 0303 	and.w	r3, r3, #3
 80008ea:	2b03      	cmp	r3, #3
 80008ec:	d118      	bne.n	8000920 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80008f4:	2201      	movs	r2, #1
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	fa02 f303 	lsl.w	r3, r2, r3
 80008fc:	43db      	mvns	r3, r3
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	4013      	ands	r3, r2
 8000902:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	08db      	lsrs	r3, r3, #3
 800090a:	f003 0201 	and.w	r2, r3, #1
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	fa02 f303 	lsl.w	r3, r2, r3
 8000914:	693a      	ldr	r2, [r7, #16]
 8000916:	4313      	orrs	r3, r2
 8000918:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	693a      	ldr	r2, [r7, #16]
 800091e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	2203      	movs	r2, #3
 800092c:	fa02 f303 	lsl.w	r3, r2, r3
 8000930:	43db      	mvns	r3, r3
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	4013      	ands	r3, r2
 8000936:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	689a      	ldr	r2, [r3, #8]
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	fa02 f303 	lsl.w	r3, r2, r3
 8000944:	693a      	ldr	r2, [r7, #16]
 8000946:	4313      	orrs	r3, r2
 8000948:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	693a      	ldr	r2, [r7, #16]
 800094e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	2b02      	cmp	r3, #2
 8000956:	d003      	beq.n	8000960 <HAL_GPIO_Init+0x128>
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	2b12      	cmp	r3, #18
 800095e:	d123      	bne.n	80009a8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	08da      	lsrs	r2, r3, #3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	3208      	adds	r2, #8
 8000968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800096c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	f003 0307 	and.w	r3, r3, #7
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	220f      	movs	r2, #15
 8000978:	fa02 f303 	lsl.w	r3, r2, r3
 800097c:	43db      	mvns	r3, r3
 800097e:	693a      	ldr	r2, [r7, #16]
 8000980:	4013      	ands	r3, r2
 8000982:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	691a      	ldr	r2, [r3, #16]
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	f003 0307 	and.w	r3, r3, #7
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	693a      	ldr	r2, [r7, #16]
 8000996:	4313      	orrs	r3, r2
 8000998:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	08da      	lsrs	r2, r3, #3
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	3208      	adds	r2, #8
 80009a2:	6939      	ldr	r1, [r7, #16]
 80009a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	2203      	movs	r2, #3
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	43db      	mvns	r3, r3
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	4013      	ands	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	f003 0203 	and.w	r2, r3, #3
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	fa02 f303 	lsl.w	r3, r2, r3
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	4313      	orrs	r3, r2
 80009d4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	693a      	ldr	r2, [r7, #16]
 80009da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	f000 80ac 	beq.w	8000b42 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ea:	4b5e      	ldr	r3, [pc, #376]	; (8000b64 <HAL_GPIO_Init+0x32c>)
 80009ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ee:	4a5d      	ldr	r2, [pc, #372]	; (8000b64 <HAL_GPIO_Init+0x32c>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6613      	str	r3, [r2, #96]	; 0x60
 80009f6:	4b5b      	ldr	r3, [pc, #364]	; (8000b64 <HAL_GPIO_Init+0x32c>)
 80009f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a02:	4a59      	ldr	r2, [pc, #356]	; (8000b68 <HAL_GPIO_Init+0x330>)
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	089b      	lsrs	r3, r3, #2
 8000a08:	3302      	adds	r3, #2
 8000a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	f003 0303 	and.w	r3, r3, #3
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	220f      	movs	r2, #15
 8000a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1e:	43db      	mvns	r3, r3
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	4013      	ands	r3, r2
 8000a24:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a2c:	d025      	beq.n	8000a7a <HAL_GPIO_Init+0x242>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a4e      	ldr	r2, [pc, #312]	; (8000b6c <HAL_GPIO_Init+0x334>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d01f      	beq.n	8000a76 <HAL_GPIO_Init+0x23e>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a4d      	ldr	r2, [pc, #308]	; (8000b70 <HAL_GPIO_Init+0x338>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d019      	beq.n	8000a72 <HAL_GPIO_Init+0x23a>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a4c      	ldr	r2, [pc, #304]	; (8000b74 <HAL_GPIO_Init+0x33c>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d013      	beq.n	8000a6e <HAL_GPIO_Init+0x236>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a4b      	ldr	r2, [pc, #300]	; (8000b78 <HAL_GPIO_Init+0x340>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d00d      	beq.n	8000a6a <HAL_GPIO_Init+0x232>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4a4a      	ldr	r2, [pc, #296]	; (8000b7c <HAL_GPIO_Init+0x344>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d007      	beq.n	8000a66 <HAL_GPIO_Init+0x22e>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a49      	ldr	r2, [pc, #292]	; (8000b80 <HAL_GPIO_Init+0x348>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d101      	bne.n	8000a62 <HAL_GPIO_Init+0x22a>
 8000a5e:	2306      	movs	r3, #6
 8000a60:	e00c      	b.n	8000a7c <HAL_GPIO_Init+0x244>
 8000a62:	2307      	movs	r3, #7
 8000a64:	e00a      	b.n	8000a7c <HAL_GPIO_Init+0x244>
 8000a66:	2305      	movs	r3, #5
 8000a68:	e008      	b.n	8000a7c <HAL_GPIO_Init+0x244>
 8000a6a:	2304      	movs	r3, #4
 8000a6c:	e006      	b.n	8000a7c <HAL_GPIO_Init+0x244>
 8000a6e:	2303      	movs	r3, #3
 8000a70:	e004      	b.n	8000a7c <HAL_GPIO_Init+0x244>
 8000a72:	2302      	movs	r3, #2
 8000a74:	e002      	b.n	8000a7c <HAL_GPIO_Init+0x244>
 8000a76:	2301      	movs	r3, #1
 8000a78:	e000      	b.n	8000a7c <HAL_GPIO_Init+0x244>
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	697a      	ldr	r2, [r7, #20]
 8000a7e:	f002 0203 	and.w	r2, r2, #3
 8000a82:	0092      	lsls	r2, r2, #2
 8000a84:	4093      	lsls	r3, r2
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a8c:	4936      	ldr	r1, [pc, #216]	; (8000b68 <HAL_GPIO_Init+0x330>)
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	089b      	lsrs	r3, r3, #2
 8000a92:	3302      	adds	r3, #2
 8000a94:	693a      	ldr	r2, [r7, #16]
 8000a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a9a:	4b3a      	ldr	r3, [pc, #232]	; (8000b84 <HAL_GPIO_Init+0x34c>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	43db      	mvns	r3, r3
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d003      	beq.n	8000abe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000abe:	4a31      	ldr	r2, [pc, #196]	; (8000b84 <HAL_GPIO_Init+0x34c>)
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000ac4:	4b2f      	ldr	r3, [pc, #188]	; (8000b84 <HAL_GPIO_Init+0x34c>)
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	43db      	mvns	r3, r3
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d003      	beq.n	8000ae8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ae8:	4a26      	ldr	r2, [pc, #152]	; (8000b84 <HAL_GPIO_Init+0x34c>)
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000aee:	4b25      	ldr	r3, [pc, #148]	; (8000b84 <HAL_GPIO_Init+0x34c>)
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	43db      	mvns	r3, r3
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	4013      	ands	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d003      	beq.n	8000b12 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b12:	4a1c      	ldr	r2, [pc, #112]	; (8000b84 <HAL_GPIO_Init+0x34c>)
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b18:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <HAL_GPIO_Init+0x34c>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	43db      	mvns	r3, r3
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	4013      	ands	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d003      	beq.n	8000b3c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b3c:	4a11      	ldr	r2, [pc, #68]	; (8000b84 <HAL_GPIO_Init+0x34c>)
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	3301      	adds	r3, #1
 8000b46:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	f47f ae78 	bne.w	8000848 <HAL_GPIO_Init+0x10>
  }
}
 8000b58:	bf00      	nop
 8000b5a:	371c      	adds	r7, #28
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	40021000 	.word	0x40021000
 8000b68:	40010000 	.word	0x40010000
 8000b6c:	48000400 	.word	0x48000400
 8000b70:	48000800 	.word	0x48000800
 8000b74:	48000c00 	.word	0x48000c00
 8000b78:	48001000 	.word	0x48001000
 8000b7c:	48001400 	.word	0x48001400
 8000b80:	48001800 	.word	0x48001800
 8000b84:	40010400 	.word	0x40010400

08000b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	460b      	mov	r3, r1
 8000b92:	807b      	strh	r3, [r7, #2]
 8000b94:	4613      	mov	r3, r2
 8000b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b98:	787b      	ldrb	r3, [r7, #1]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d003      	beq.n	8000ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b9e:	887a      	ldrh	r2, [r7, #2]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ba4:	e002      	b.n	8000bac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ba6:	887a      	ldrh	r2, [r7, #2]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	695a      	ldr	r2, [r3, #20]
 8000bc8:	887b      	ldrh	r3, [r7, #2]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d003      	beq.n	8000bd8 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bd0:	887a      	ldrh	r2, [r7, #2]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000bd6:	e002      	b.n	8000bde <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bd8:	887a      	ldrh	r2, [r7, #2]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	619a      	str	r2, [r3, #24]
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
	...

08000bec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000bf0:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <HAL_PWREx_GetVoltageRange+0x18>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	40007000 	.word	0x40007000

08000c08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c16:	d130      	bne.n	8000c7a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c18:	4b23      	ldr	r3, [pc, #140]	; (8000ca8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c24:	d038      	beq.n	8000c98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c26:	4b20      	ldr	r3, [pc, #128]	; (8000ca8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c2e:	4a1e      	ldr	r2, [pc, #120]	; (8000ca8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c34:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c36:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2232      	movs	r2, #50	; 0x32
 8000c3c:	fb02 f303 	mul.w	r3, r2, r3
 8000c40:	4a1b      	ldr	r2, [pc, #108]	; (8000cb0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c42:	fba2 2303 	umull	r2, r3, r2, r3
 8000c46:	0c9b      	lsrs	r3, r3, #18
 8000c48:	3301      	adds	r3, #1
 8000c4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c4c:	e002      	b.n	8000c54 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	3b01      	subs	r3, #1
 8000c52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c54:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c56:	695b      	ldr	r3, [r3, #20]
 8000c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c60:	d102      	bne.n	8000c68 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d1f2      	bne.n	8000c4e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c68:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c6a:	695b      	ldr	r3, [r3, #20]
 8000c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c74:	d110      	bne.n	8000c98 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000c76:	2303      	movs	r3, #3
 8000c78:	e00f      	b.n	8000c9a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c86:	d007      	beq.n	8000c98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c88:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c90:	4a05      	ldr	r2, [pc, #20]	; (8000ca8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c96:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3714      	adds	r7, #20
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	40007000 	.word	0x40007000
 8000cac:	20000000 	.word	0x20000000
 8000cb0:	431bde83 	.word	0x431bde83

08000cb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b088      	sub	sp, #32
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d101      	bne.n	8000cc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e3d4      	b.n	8001470 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cc6:	4ba1      	ldr	r3, [pc, #644]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	f003 030c 	and.w	r3, r3, #12
 8000cce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000cd0:	4b9e      	ldr	r3, [pc, #632]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	f003 0303 	and.w	r3, r3, #3
 8000cd8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 0310 	and.w	r3, r3, #16
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f000 80e4 	beq.w	8000eb0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d007      	beq.n	8000cfe <HAL_RCC_OscConfig+0x4a>
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	2b0c      	cmp	r3, #12
 8000cf2:	f040 808b 	bne.w	8000e0c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	f040 8087 	bne.w	8000e0c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000cfe:	4b93      	ldr	r3, [pc, #588]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d005      	beq.n	8000d16 <HAL_RCC_OscConfig+0x62>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	699b      	ldr	r3, [r3, #24]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d101      	bne.n	8000d16 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e3ac      	b.n	8001470 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6a1a      	ldr	r2, [r3, #32]
 8000d1a:	4b8c      	ldr	r3, [pc, #560]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f003 0308 	and.w	r3, r3, #8
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d004      	beq.n	8000d30 <HAL_RCC_OscConfig+0x7c>
 8000d26:	4b89      	ldr	r3, [pc, #548]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d2e:	e005      	b.n	8000d3c <HAL_RCC_OscConfig+0x88>
 8000d30:	4b86      	ldr	r3, [pc, #536]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d36:	091b      	lsrs	r3, r3, #4
 8000d38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d223      	bcs.n	8000d88 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6a1b      	ldr	r3, [r3, #32]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 fd5b 	bl	8001800 <RCC_SetFlashLatencyFromMSIRange>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000d50:	2301      	movs	r3, #1
 8000d52:	e38d      	b.n	8001470 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d54:	4b7d      	ldr	r3, [pc, #500]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a7c      	ldr	r2, [pc, #496]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000d5a:	f043 0308 	orr.w	r3, r3, #8
 8000d5e:	6013      	str	r3, [r2, #0]
 8000d60:	4b7a      	ldr	r3, [pc, #488]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6a1b      	ldr	r3, [r3, #32]
 8000d6c:	4977      	ldr	r1, [pc, #476]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d72:	4b76      	ldr	r3, [pc, #472]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	69db      	ldr	r3, [r3, #28]
 8000d7e:	021b      	lsls	r3, r3, #8
 8000d80:	4972      	ldr	r1, [pc, #456]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000d82:	4313      	orrs	r3, r2
 8000d84:	604b      	str	r3, [r1, #4]
 8000d86:	e025      	b.n	8000dd4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d88:	4b70      	ldr	r3, [pc, #448]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a6f      	ldr	r2, [pc, #444]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000d8e:	f043 0308 	orr.w	r3, r3, #8
 8000d92:	6013      	str	r3, [r2, #0]
 8000d94:	4b6d      	ldr	r3, [pc, #436]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6a1b      	ldr	r3, [r3, #32]
 8000da0:	496a      	ldr	r1, [pc, #424]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000da2:	4313      	orrs	r3, r2
 8000da4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000da6:	4b69      	ldr	r3, [pc, #420]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	69db      	ldr	r3, [r3, #28]
 8000db2:	021b      	lsls	r3, r3, #8
 8000db4:	4965      	ldr	r1, [pc, #404]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000db6:	4313      	orrs	r3, r2
 8000db8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d109      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6a1b      	ldr	r3, [r3, #32]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f000 fd1b 	bl	8001800 <RCC_SetFlashLatencyFromMSIRange>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e34d      	b.n	8001470 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000dd4:	f000 fc36 	bl	8001644 <HAL_RCC_GetSysClockFreq>
 8000dd8:	4601      	mov	r1, r0
 8000dda:	4b5c      	ldr	r3, [pc, #368]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	091b      	lsrs	r3, r3, #4
 8000de0:	f003 030f 	and.w	r3, r3, #15
 8000de4:	4a5a      	ldr	r2, [pc, #360]	; (8000f50 <HAL_RCC_OscConfig+0x29c>)
 8000de6:	5cd3      	ldrb	r3, [r2, r3]
 8000de8:	f003 031f 	and.w	r3, r3, #31
 8000dec:	fa21 f303 	lsr.w	r3, r1, r3
 8000df0:	4a58      	ldr	r2, [pc, #352]	; (8000f54 <HAL_RCC_OscConfig+0x2a0>)
 8000df2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000df4:	4b58      	ldr	r3, [pc, #352]	; (8000f58 <HAL_RCC_OscConfig+0x2a4>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fb2b 	bl	8000454 <HAL_InitTick>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d052      	beq.n	8000eae <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
 8000e0a:	e331      	b.n	8001470 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d032      	beq.n	8000e7a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000e14:	4b4d      	ldr	r3, [pc, #308]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a4c      	ldr	r2, [pc, #304]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000e1a:	f043 0301 	orr.w	r3, r3, #1
 8000e1e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e20:	f7ff fc1c 	bl	800065c <HAL_GetTick>
 8000e24:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e26:	e008      	b.n	8000e3a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e28:	f7ff fc18 	bl	800065c <HAL_GetTick>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	d901      	bls.n	8000e3a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000e36:	2303      	movs	r3, #3
 8000e38:	e31a      	b.n	8001470 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e3a:	4b44      	ldr	r3, [pc, #272]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f003 0302 	and.w	r3, r3, #2
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d0f0      	beq.n	8000e28 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e46:	4b41      	ldr	r3, [pc, #260]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a40      	ldr	r2, [pc, #256]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000e4c:	f043 0308 	orr.w	r3, r3, #8
 8000e50:	6013      	str	r3, [r2, #0]
 8000e52:	4b3e      	ldr	r3, [pc, #248]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6a1b      	ldr	r3, [r3, #32]
 8000e5e:	493b      	ldr	r1, [pc, #236]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000e60:	4313      	orrs	r3, r2
 8000e62:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e64:	4b39      	ldr	r3, [pc, #228]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	69db      	ldr	r3, [r3, #28]
 8000e70:	021b      	lsls	r3, r3, #8
 8000e72:	4936      	ldr	r1, [pc, #216]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000e74:	4313      	orrs	r3, r2
 8000e76:	604b      	str	r3, [r1, #4]
 8000e78:	e01a      	b.n	8000eb0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e7a:	4b34      	ldr	r3, [pc, #208]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a33      	ldr	r2, [pc, #204]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000e80:	f023 0301 	bic.w	r3, r3, #1
 8000e84:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e86:	f7ff fbe9 	bl	800065c <HAL_GetTick>
 8000e8a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e8c:	e008      	b.n	8000ea0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e8e:	f7ff fbe5 	bl	800065c <HAL_GetTick>
 8000e92:	4602      	mov	r2, r0
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d901      	bls.n	8000ea0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	e2e7      	b.n	8001470 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000ea0:	4b2a      	ldr	r3, [pc, #168]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f003 0302 	and.w	r3, r3, #2
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d1f0      	bne.n	8000e8e <HAL_RCC_OscConfig+0x1da>
 8000eac:	e000      	b.n	8000eb0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000eae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d074      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	2b08      	cmp	r3, #8
 8000ec0:	d005      	beq.n	8000ece <HAL_RCC_OscConfig+0x21a>
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	2b0c      	cmp	r3, #12
 8000ec6:	d10e      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	2b03      	cmp	r3, #3
 8000ecc:	d10b      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ece:	4b1f      	ldr	r3, [pc, #124]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d064      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x2f0>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d160      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e2c4      	b.n	8001470 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eee:	d106      	bne.n	8000efe <HAL_RCC_OscConfig+0x24a>
 8000ef0:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a15      	ldr	r2, [pc, #84]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000ef6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	e01d      	b.n	8000f3a <HAL_RCC_OscConfig+0x286>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f06:	d10c      	bne.n	8000f22 <HAL_RCC_OscConfig+0x26e>
 8000f08:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a0f      	ldr	r2, [pc, #60]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000f0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f12:	6013      	str	r3, [r2, #0]
 8000f14:	4b0d      	ldr	r3, [pc, #52]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0c      	ldr	r2, [pc, #48]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000f1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f1e:	6013      	str	r3, [r2, #0]
 8000f20:	e00b      	b.n	8000f3a <HAL_RCC_OscConfig+0x286>
 8000f22:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a09      	ldr	r2, [pc, #36]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f2c:	6013      	str	r3, [r2, #0]
 8000f2e:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a06      	ldr	r2, [pc, #24]	; (8000f4c <HAL_RCC_OscConfig+0x298>)
 8000f34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f38:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d01c      	beq.n	8000f7c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f42:	f7ff fb8b 	bl	800065c <HAL_GetTick>
 8000f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f48:	e011      	b.n	8000f6e <HAL_RCC_OscConfig+0x2ba>
 8000f4a:	bf00      	nop
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	08004948 	.word	0x08004948
 8000f54:	20000000 	.word	0x20000000
 8000f58:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f5c:	f7ff fb7e 	bl	800065c <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	2b64      	cmp	r3, #100	; 0x64
 8000f68:	d901      	bls.n	8000f6e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e280      	b.n	8001470 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f6e:	4baf      	ldr	r3, [pc, #700]	; (800122c <HAL_RCC_OscConfig+0x578>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d0f0      	beq.n	8000f5c <HAL_RCC_OscConfig+0x2a8>
 8000f7a:	e014      	b.n	8000fa6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f7c:	f7ff fb6e 	bl	800065c <HAL_GetTick>
 8000f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f82:	e008      	b.n	8000f96 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f84:	f7ff fb6a 	bl	800065c <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	2b64      	cmp	r3, #100	; 0x64
 8000f90:	d901      	bls.n	8000f96 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000f92:	2303      	movs	r3, #3
 8000f94:	e26c      	b.n	8001470 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f96:	4ba5      	ldr	r3, [pc, #660]	; (800122c <HAL_RCC_OscConfig+0x578>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1f0      	bne.n	8000f84 <HAL_RCC_OscConfig+0x2d0>
 8000fa2:	e000      	b.n	8000fa6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d060      	beq.n	8001074 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	2b04      	cmp	r3, #4
 8000fb6:	d005      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x310>
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	2b0c      	cmp	r3, #12
 8000fbc:	d119      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d116      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fc4:	4b99      	ldr	r3, [pc, #612]	; (800122c <HAL_RCC_OscConfig+0x578>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d005      	beq.n	8000fdc <HAL_RCC_OscConfig+0x328>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d101      	bne.n	8000fdc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e249      	b.n	8001470 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fdc:	4b93      	ldr	r3, [pc, #588]	; (800122c <HAL_RCC_OscConfig+0x578>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	691b      	ldr	r3, [r3, #16]
 8000fe8:	061b      	lsls	r3, r3, #24
 8000fea:	4990      	ldr	r1, [pc, #576]	; (800122c <HAL_RCC_OscConfig+0x578>)
 8000fec:	4313      	orrs	r3, r2
 8000fee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ff0:	e040      	b.n	8001074 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d023      	beq.n	8001042 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ffa:	4b8c      	ldr	r3, [pc, #560]	; (800122c <HAL_RCC_OscConfig+0x578>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a8b      	ldr	r2, [pc, #556]	; (800122c <HAL_RCC_OscConfig+0x578>)
 8001000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001004:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001006:	f7ff fb29 	bl	800065c <HAL_GetTick>
 800100a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800100c:	e008      	b.n	8001020 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800100e:	f7ff fb25 	bl	800065c <HAL_GetTick>
 8001012:	4602      	mov	r2, r0
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	2b02      	cmp	r3, #2
 800101a:	d901      	bls.n	8001020 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800101c:	2303      	movs	r3, #3
 800101e:	e227      	b.n	8001470 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001020:	4b82      	ldr	r3, [pc, #520]	; (800122c <HAL_RCC_OscConfig+0x578>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001028:	2b00      	cmp	r3, #0
 800102a:	d0f0      	beq.n	800100e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800102c:	4b7f      	ldr	r3, [pc, #508]	; (800122c <HAL_RCC_OscConfig+0x578>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	691b      	ldr	r3, [r3, #16]
 8001038:	061b      	lsls	r3, r3, #24
 800103a:	497c      	ldr	r1, [pc, #496]	; (800122c <HAL_RCC_OscConfig+0x578>)
 800103c:	4313      	orrs	r3, r2
 800103e:	604b      	str	r3, [r1, #4]
 8001040:	e018      	b.n	8001074 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001042:	4b7a      	ldr	r3, [pc, #488]	; (800122c <HAL_RCC_OscConfig+0x578>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a79      	ldr	r2, [pc, #484]	; (800122c <HAL_RCC_OscConfig+0x578>)
 8001048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800104c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800104e:	f7ff fb05 	bl	800065c <HAL_GetTick>
 8001052:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001054:	e008      	b.n	8001068 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001056:	f7ff fb01 	bl	800065c <HAL_GetTick>
 800105a:	4602      	mov	r2, r0
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	2b02      	cmp	r3, #2
 8001062:	d901      	bls.n	8001068 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001064:	2303      	movs	r3, #3
 8001066:	e203      	b.n	8001470 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001068:	4b70      	ldr	r3, [pc, #448]	; (800122c <HAL_RCC_OscConfig+0x578>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001070:	2b00      	cmp	r3, #0
 8001072:	d1f0      	bne.n	8001056 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0308 	and.w	r3, r3, #8
 800107c:	2b00      	cmp	r3, #0
 800107e:	d03c      	beq.n	80010fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	695b      	ldr	r3, [r3, #20]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d01c      	beq.n	80010c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001088:	4b68      	ldr	r3, [pc, #416]	; (800122c <HAL_RCC_OscConfig+0x578>)
 800108a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800108e:	4a67      	ldr	r2, [pc, #412]	; (800122c <HAL_RCC_OscConfig+0x578>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001098:	f7ff fae0 	bl	800065c <HAL_GetTick>
 800109c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800109e:	e008      	b.n	80010b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010a0:	f7ff fadc 	bl	800065c <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e1de      	b.n	8001470 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010b2:	4b5e      	ldr	r3, [pc, #376]	; (800122c <HAL_RCC_OscConfig+0x578>)
 80010b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010b8:	f003 0302 	and.w	r3, r3, #2
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d0ef      	beq.n	80010a0 <HAL_RCC_OscConfig+0x3ec>
 80010c0:	e01b      	b.n	80010fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010c2:	4b5a      	ldr	r3, [pc, #360]	; (800122c <HAL_RCC_OscConfig+0x578>)
 80010c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010c8:	4a58      	ldr	r2, [pc, #352]	; (800122c <HAL_RCC_OscConfig+0x578>)
 80010ca:	f023 0301 	bic.w	r3, r3, #1
 80010ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010d2:	f7ff fac3 	bl	800065c <HAL_GetTick>
 80010d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010d8:	e008      	b.n	80010ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010da:	f7ff fabf 	bl	800065c <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d901      	bls.n	80010ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e1c1      	b.n	8001470 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010ec:	4b4f      	ldr	r3, [pc, #316]	; (800122c <HAL_RCC_OscConfig+0x578>)
 80010ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1ef      	bne.n	80010da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0304 	and.w	r3, r3, #4
 8001102:	2b00      	cmp	r3, #0
 8001104:	f000 80a6 	beq.w	8001254 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001108:	2300      	movs	r3, #0
 800110a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800110c:	4b47      	ldr	r3, [pc, #284]	; (800122c <HAL_RCC_OscConfig+0x578>)
 800110e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d10d      	bne.n	8001134 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001118:	4b44      	ldr	r3, [pc, #272]	; (800122c <HAL_RCC_OscConfig+0x578>)
 800111a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111c:	4a43      	ldr	r2, [pc, #268]	; (800122c <HAL_RCC_OscConfig+0x578>)
 800111e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001122:	6593      	str	r3, [r2, #88]	; 0x58
 8001124:	4b41      	ldr	r3, [pc, #260]	; (800122c <HAL_RCC_OscConfig+0x578>)
 8001126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001130:	2301      	movs	r3, #1
 8001132:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001134:	4b3e      	ldr	r3, [pc, #248]	; (8001230 <HAL_RCC_OscConfig+0x57c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800113c:	2b00      	cmp	r3, #0
 800113e:	d118      	bne.n	8001172 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001140:	4b3b      	ldr	r3, [pc, #236]	; (8001230 <HAL_RCC_OscConfig+0x57c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a3a      	ldr	r2, [pc, #232]	; (8001230 <HAL_RCC_OscConfig+0x57c>)
 8001146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800114a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800114c:	f7ff fa86 	bl	800065c <HAL_GetTick>
 8001150:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001154:	f7ff fa82 	bl	800065c <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b02      	cmp	r3, #2
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e184      	b.n	8001470 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001166:	4b32      	ldr	r3, [pc, #200]	; (8001230 <HAL_RCC_OscConfig+0x57c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800116e:	2b00      	cmp	r3, #0
 8001170:	d0f0      	beq.n	8001154 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d108      	bne.n	800118c <HAL_RCC_OscConfig+0x4d8>
 800117a:	4b2c      	ldr	r3, [pc, #176]	; (800122c <HAL_RCC_OscConfig+0x578>)
 800117c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001180:	4a2a      	ldr	r2, [pc, #168]	; (800122c <HAL_RCC_OscConfig+0x578>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800118a:	e024      	b.n	80011d6 <HAL_RCC_OscConfig+0x522>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	2b05      	cmp	r3, #5
 8001192:	d110      	bne.n	80011b6 <HAL_RCC_OscConfig+0x502>
 8001194:	4b25      	ldr	r3, [pc, #148]	; (800122c <HAL_RCC_OscConfig+0x578>)
 8001196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800119a:	4a24      	ldr	r2, [pc, #144]	; (800122c <HAL_RCC_OscConfig+0x578>)
 800119c:	f043 0304 	orr.w	r3, r3, #4
 80011a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011a4:	4b21      	ldr	r3, [pc, #132]	; (800122c <HAL_RCC_OscConfig+0x578>)
 80011a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011aa:	4a20      	ldr	r2, [pc, #128]	; (800122c <HAL_RCC_OscConfig+0x578>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011b4:	e00f      	b.n	80011d6 <HAL_RCC_OscConfig+0x522>
 80011b6:	4b1d      	ldr	r3, [pc, #116]	; (800122c <HAL_RCC_OscConfig+0x578>)
 80011b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011bc:	4a1b      	ldr	r2, [pc, #108]	; (800122c <HAL_RCC_OscConfig+0x578>)
 80011be:	f023 0301 	bic.w	r3, r3, #1
 80011c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011c6:	4b19      	ldr	r3, [pc, #100]	; (800122c <HAL_RCC_OscConfig+0x578>)
 80011c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011cc:	4a17      	ldr	r2, [pc, #92]	; (800122c <HAL_RCC_OscConfig+0x578>)
 80011ce:	f023 0304 	bic.w	r3, r3, #4
 80011d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d016      	beq.n	800120c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011de:	f7ff fa3d 	bl	800065c <HAL_GetTick>
 80011e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011e4:	e00a      	b.n	80011fc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011e6:	f7ff fa39 	bl	800065c <HAL_GetTick>
 80011ea:	4602      	mov	r2, r0
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d901      	bls.n	80011fc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80011f8:	2303      	movs	r3, #3
 80011fa:	e139      	b.n	8001470 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011fc:	4b0b      	ldr	r3, [pc, #44]	; (800122c <HAL_RCC_OscConfig+0x578>)
 80011fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d0ed      	beq.n	80011e6 <HAL_RCC_OscConfig+0x532>
 800120a:	e01a      	b.n	8001242 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800120c:	f7ff fa26 	bl	800065c <HAL_GetTick>
 8001210:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001212:	e00f      	b.n	8001234 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001214:	f7ff fa22 	bl	800065c <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001222:	4293      	cmp	r3, r2
 8001224:	d906      	bls.n	8001234 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e122      	b.n	8001470 <HAL_RCC_OscConfig+0x7bc>
 800122a:	bf00      	nop
 800122c:	40021000 	.word	0x40021000
 8001230:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001234:	4b90      	ldr	r3, [pc, #576]	; (8001478 <HAL_RCC_OscConfig+0x7c4>)
 8001236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1e8      	bne.n	8001214 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001242:	7ffb      	ldrb	r3, [r7, #31]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d105      	bne.n	8001254 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001248:	4b8b      	ldr	r3, [pc, #556]	; (8001478 <HAL_RCC_OscConfig+0x7c4>)
 800124a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800124c:	4a8a      	ldr	r2, [pc, #552]	; (8001478 <HAL_RCC_OscConfig+0x7c4>)
 800124e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001252:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001258:	2b00      	cmp	r3, #0
 800125a:	f000 8108 	beq.w	800146e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001262:	2b02      	cmp	r3, #2
 8001264:	f040 80d0 	bne.w	8001408 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001268:	4b83      	ldr	r3, [pc, #524]	; (8001478 <HAL_RCC_OscConfig+0x7c4>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	f003 0203 	and.w	r2, r3, #3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001278:	429a      	cmp	r2, r3
 800127a:	d130      	bne.n	80012de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	3b01      	subs	r3, #1
 8001288:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800128a:	429a      	cmp	r2, r3
 800128c:	d127      	bne.n	80012de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001298:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800129a:	429a      	cmp	r2, r3
 800129c:	d11f      	bne.n	80012de <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80012a8:	2a07      	cmp	r2, #7
 80012aa:	bf14      	ite	ne
 80012ac:	2201      	movne	r2, #1
 80012ae:	2200      	moveq	r2, #0
 80012b0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d113      	bne.n	80012de <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012c0:	085b      	lsrs	r3, r3, #1
 80012c2:	3b01      	subs	r3, #1
 80012c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d109      	bne.n	80012de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d4:	085b      	lsrs	r3, r3, #1
 80012d6:	3b01      	subs	r3, #1
 80012d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012da:	429a      	cmp	r2, r3
 80012dc:	d06e      	beq.n	80013bc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	2b0c      	cmp	r3, #12
 80012e2:	d069      	beq.n	80013b8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80012e4:	4b64      	ldr	r3, [pc, #400]	; (8001478 <HAL_RCC_OscConfig+0x7c4>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d105      	bne.n	80012fc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80012f0:	4b61      	ldr	r3, [pc, #388]	; (8001478 <HAL_RCC_OscConfig+0x7c4>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e0b7      	b.n	8001470 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001300:	4b5d      	ldr	r3, [pc, #372]	; (8001478 <HAL_RCC_OscConfig+0x7c4>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a5c      	ldr	r2, [pc, #368]	; (8001478 <HAL_RCC_OscConfig+0x7c4>)
 8001306:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800130a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800130c:	f7ff f9a6 	bl	800065c <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001314:	f7ff f9a2 	bl	800065c <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e0a4      	b.n	8001470 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001326:	4b54      	ldr	r3, [pc, #336]	; (8001478 <HAL_RCC_OscConfig+0x7c4>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1f0      	bne.n	8001314 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001332:	4b51      	ldr	r3, [pc, #324]	; (8001478 <HAL_RCC_OscConfig+0x7c4>)
 8001334:	68da      	ldr	r2, [r3, #12]
 8001336:	4b51      	ldr	r3, [pc, #324]	; (800147c <HAL_RCC_OscConfig+0x7c8>)
 8001338:	4013      	ands	r3, r2
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001342:	3a01      	subs	r2, #1
 8001344:	0112      	lsls	r2, r2, #4
 8001346:	4311      	orrs	r1, r2
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800134c:	0212      	lsls	r2, r2, #8
 800134e:	4311      	orrs	r1, r2
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001354:	0852      	lsrs	r2, r2, #1
 8001356:	3a01      	subs	r2, #1
 8001358:	0552      	lsls	r2, r2, #21
 800135a:	4311      	orrs	r1, r2
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001360:	0852      	lsrs	r2, r2, #1
 8001362:	3a01      	subs	r2, #1
 8001364:	0652      	lsls	r2, r2, #25
 8001366:	4311      	orrs	r1, r2
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800136c:	0912      	lsrs	r2, r2, #4
 800136e:	0452      	lsls	r2, r2, #17
 8001370:	430a      	orrs	r2, r1
 8001372:	4941      	ldr	r1, [pc, #260]	; (8001478 <HAL_RCC_OscConfig+0x7c4>)
 8001374:	4313      	orrs	r3, r2
 8001376:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001378:	4b3f      	ldr	r3, [pc, #252]	; (8001478 <HAL_RCC_OscConfig+0x7c4>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a3e      	ldr	r2, [pc, #248]	; (8001478 <HAL_RCC_OscConfig+0x7c4>)
 800137e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001382:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001384:	4b3c      	ldr	r3, [pc, #240]	; (8001478 <HAL_RCC_OscConfig+0x7c4>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	4a3b      	ldr	r2, [pc, #236]	; (8001478 <HAL_RCC_OscConfig+0x7c4>)
 800138a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800138e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001390:	f7ff f964 	bl	800065c <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001398:	f7ff f960 	bl	800065c <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e062      	b.n	8001470 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013aa:	4b33      	ldr	r3, [pc, #204]	; (8001478 <HAL_RCC_OscConfig+0x7c4>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d0f0      	beq.n	8001398 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013b6:	e05a      	b.n	800146e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e059      	b.n	8001470 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013bc:	4b2e      	ldr	r3, [pc, #184]	; (8001478 <HAL_RCC_OscConfig+0x7c4>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d152      	bne.n	800146e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80013c8:	4b2b      	ldr	r3, [pc, #172]	; (8001478 <HAL_RCC_OscConfig+0x7c4>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a2a      	ldr	r2, [pc, #168]	; (8001478 <HAL_RCC_OscConfig+0x7c4>)
 80013ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013d2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013d4:	4b28      	ldr	r3, [pc, #160]	; (8001478 <HAL_RCC_OscConfig+0x7c4>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	4a27      	ldr	r2, [pc, #156]	; (8001478 <HAL_RCC_OscConfig+0x7c4>)
 80013da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80013e0:	f7ff f93c 	bl	800065c <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e8:	f7ff f938 	bl	800065c <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e03a      	b.n	8001470 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013fa:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <HAL_RCC_OscConfig+0x7c4>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0f0      	beq.n	80013e8 <HAL_RCC_OscConfig+0x734>
 8001406:	e032      	b.n	800146e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	2b0c      	cmp	r3, #12
 800140c:	d02d      	beq.n	800146a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800140e:	4b1a      	ldr	r3, [pc, #104]	; (8001478 <HAL_RCC_OscConfig+0x7c4>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a19      	ldr	r2, [pc, #100]	; (8001478 <HAL_RCC_OscConfig+0x7c4>)
 8001414:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001418:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800141a:	4b17      	ldr	r3, [pc, #92]	; (8001478 <HAL_RCC_OscConfig+0x7c4>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d105      	bne.n	8001432 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001426:	4b14      	ldr	r3, [pc, #80]	; (8001478 <HAL_RCC_OscConfig+0x7c4>)
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	4a13      	ldr	r2, [pc, #76]	; (8001478 <HAL_RCC_OscConfig+0x7c4>)
 800142c:	f023 0303 	bic.w	r3, r3, #3
 8001430:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001432:	4b11      	ldr	r3, [pc, #68]	; (8001478 <HAL_RCC_OscConfig+0x7c4>)
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	4a10      	ldr	r2, [pc, #64]	; (8001478 <HAL_RCC_OscConfig+0x7c4>)
 8001438:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800143c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001440:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001442:	f7ff f90b 	bl	800065c <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001448:	e008      	b.n	800145c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800144a:	f7ff f907 	bl	800065c <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e009      	b.n	8001470 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_RCC_OscConfig+0x7c4>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1f0      	bne.n	800144a <HAL_RCC_OscConfig+0x796>
 8001468:	e001      	b.n	800146e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e000      	b.n	8001470 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	3720      	adds	r7, #32
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40021000 	.word	0x40021000
 800147c:	f99d808c 	.word	0xf99d808c

08001480 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d101      	bne.n	8001494 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e0c8      	b.n	8001626 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001494:	4b66      	ldr	r3, [pc, #408]	; (8001630 <HAL_RCC_ClockConfig+0x1b0>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0307 	and.w	r3, r3, #7
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d910      	bls.n	80014c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014a2:	4b63      	ldr	r3, [pc, #396]	; (8001630 <HAL_RCC_ClockConfig+0x1b0>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f023 0207 	bic.w	r2, r3, #7
 80014aa:	4961      	ldr	r1, [pc, #388]	; (8001630 <HAL_RCC_ClockConfig+0x1b0>)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014b2:	4b5f      	ldr	r3, [pc, #380]	; (8001630 <HAL_RCC_ClockConfig+0x1b0>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d001      	beq.n	80014c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e0b0      	b.n	8001626 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d04c      	beq.n	800156a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	2b03      	cmp	r3, #3
 80014d6:	d107      	bne.n	80014e8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014d8:	4b56      	ldr	r3, [pc, #344]	; (8001634 <HAL_RCC_ClockConfig+0x1b4>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d121      	bne.n	8001528 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e09e      	b.n	8001626 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d107      	bne.n	8001500 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014f0:	4b50      	ldr	r3, [pc, #320]	; (8001634 <HAL_RCC_ClockConfig+0x1b4>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d115      	bne.n	8001528 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e092      	b.n	8001626 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d107      	bne.n	8001518 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001508:	4b4a      	ldr	r3, [pc, #296]	; (8001634 <HAL_RCC_ClockConfig+0x1b4>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d109      	bne.n	8001528 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e086      	b.n	8001626 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001518:	4b46      	ldr	r3, [pc, #280]	; (8001634 <HAL_RCC_ClockConfig+0x1b4>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001520:	2b00      	cmp	r3, #0
 8001522:	d101      	bne.n	8001528 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e07e      	b.n	8001626 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001528:	4b42      	ldr	r3, [pc, #264]	; (8001634 <HAL_RCC_ClockConfig+0x1b4>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f023 0203 	bic.w	r2, r3, #3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	493f      	ldr	r1, [pc, #252]	; (8001634 <HAL_RCC_ClockConfig+0x1b4>)
 8001536:	4313      	orrs	r3, r2
 8001538:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800153a:	f7ff f88f 	bl	800065c <HAL_GetTick>
 800153e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001540:	e00a      	b.n	8001558 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001542:	f7ff f88b 	bl	800065c <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001550:	4293      	cmp	r3, r2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e066      	b.n	8001626 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001558:	4b36      	ldr	r3, [pc, #216]	; (8001634 <HAL_RCC_ClockConfig+0x1b4>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f003 020c 	and.w	r2, r3, #12
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	429a      	cmp	r2, r3
 8001568:	d1eb      	bne.n	8001542 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d008      	beq.n	8001588 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001576:	4b2f      	ldr	r3, [pc, #188]	; (8001634 <HAL_RCC_ClockConfig+0x1b4>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	492c      	ldr	r1, [pc, #176]	; (8001634 <HAL_RCC_ClockConfig+0x1b4>)
 8001584:	4313      	orrs	r3, r2
 8001586:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001588:	4b29      	ldr	r3, [pc, #164]	; (8001630 <HAL_RCC_ClockConfig+0x1b0>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0307 	and.w	r3, r3, #7
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	429a      	cmp	r2, r3
 8001594:	d210      	bcs.n	80015b8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001596:	4b26      	ldr	r3, [pc, #152]	; (8001630 <HAL_RCC_ClockConfig+0x1b0>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f023 0207 	bic.w	r2, r3, #7
 800159e:	4924      	ldr	r1, [pc, #144]	; (8001630 <HAL_RCC_ClockConfig+0x1b0>)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a6:	4b22      	ldr	r3, [pc, #136]	; (8001630 <HAL_RCC_ClockConfig+0x1b0>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d001      	beq.n	80015b8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e036      	b.n	8001626 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0304 	and.w	r3, r3, #4
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d008      	beq.n	80015d6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015c4:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <HAL_RCC_ClockConfig+0x1b4>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	4918      	ldr	r1, [pc, #96]	; (8001634 <HAL_RCC_ClockConfig+0x1b4>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d009      	beq.n	80015f6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015e2:	4b14      	ldr	r3, [pc, #80]	; (8001634 <HAL_RCC_ClockConfig+0x1b4>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	4910      	ldr	r1, [pc, #64]	; (8001634 <HAL_RCC_ClockConfig+0x1b4>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015f6:	f000 f825 	bl	8001644 <HAL_RCC_GetSysClockFreq>
 80015fa:	4601      	mov	r1, r0
 80015fc:	4b0d      	ldr	r3, [pc, #52]	; (8001634 <HAL_RCC_ClockConfig+0x1b4>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	091b      	lsrs	r3, r3, #4
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	4a0c      	ldr	r2, [pc, #48]	; (8001638 <HAL_RCC_ClockConfig+0x1b8>)
 8001608:	5cd3      	ldrb	r3, [r2, r3]
 800160a:	f003 031f 	and.w	r3, r3, #31
 800160e:	fa21 f303 	lsr.w	r3, r1, r3
 8001612:	4a0a      	ldr	r2, [pc, #40]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 8001614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001616:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <HAL_RCC_ClockConfig+0x1c0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe ff1a 	bl	8000454 <HAL_InitTick>
 8001620:	4603      	mov	r3, r0
 8001622:	72fb      	strb	r3, [r7, #11]

  return status;
 8001624:	7afb      	ldrb	r3, [r7, #11]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40022000 	.word	0x40022000
 8001634:	40021000 	.word	0x40021000
 8001638:	08004948 	.word	0x08004948
 800163c:	20000000 	.word	0x20000000
 8001640:	20000004 	.word	0x20000004

08001644 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001644:	b480      	push	{r7}
 8001646:	b089      	sub	sp, #36	; 0x24
 8001648:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
 800164e:	2300      	movs	r3, #0
 8001650:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001652:	4b3d      	ldr	r3, [pc, #244]	; (8001748 <HAL_RCC_GetSysClockFreq+0x104>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 030c 	and.w	r3, r3, #12
 800165a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800165c:	4b3a      	ldr	r3, [pc, #232]	; (8001748 <HAL_RCC_GetSysClockFreq+0x104>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d005      	beq.n	8001678 <HAL_RCC_GetSysClockFreq+0x34>
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	2b0c      	cmp	r3, #12
 8001670:	d121      	bne.n	80016b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d11e      	bne.n	80016b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001678:	4b33      	ldr	r3, [pc, #204]	; (8001748 <HAL_RCC_GetSysClockFreq+0x104>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0308 	and.w	r3, r3, #8
 8001680:	2b00      	cmp	r3, #0
 8001682:	d107      	bne.n	8001694 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001684:	4b30      	ldr	r3, [pc, #192]	; (8001748 <HAL_RCC_GetSysClockFreq+0x104>)
 8001686:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800168a:	0a1b      	lsrs	r3, r3, #8
 800168c:	f003 030f 	and.w	r3, r3, #15
 8001690:	61fb      	str	r3, [r7, #28]
 8001692:	e005      	b.n	80016a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001694:	4b2c      	ldr	r3, [pc, #176]	; (8001748 <HAL_RCC_GetSysClockFreq+0x104>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	091b      	lsrs	r3, r3, #4
 800169a:	f003 030f 	and.w	r3, r3, #15
 800169e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80016a0:	4a2a      	ldr	r2, [pc, #168]	; (800174c <HAL_RCC_GetSysClockFreq+0x108>)
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d10d      	bne.n	80016cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016b4:	e00a      	b.n	80016cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	d102      	bne.n	80016c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80016bc:	4b24      	ldr	r3, [pc, #144]	; (8001750 <HAL_RCC_GetSysClockFreq+0x10c>)
 80016be:	61bb      	str	r3, [r7, #24]
 80016c0:	e004      	b.n	80016cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	2b08      	cmp	r3, #8
 80016c6:	d101      	bne.n	80016cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016c8:	4b22      	ldr	r3, [pc, #136]	; (8001754 <HAL_RCC_GetSysClockFreq+0x110>)
 80016ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	2b0c      	cmp	r3, #12
 80016d0:	d133      	bne.n	800173a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80016d2:	4b1d      	ldr	r3, [pc, #116]	; (8001748 <HAL_RCC_GetSysClockFreq+0x104>)
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d002      	beq.n	80016e8 <HAL_RCC_GetSysClockFreq+0xa4>
 80016e2:	2b03      	cmp	r3, #3
 80016e4:	d003      	beq.n	80016ee <HAL_RCC_GetSysClockFreq+0xaa>
 80016e6:	e005      	b.n	80016f4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80016e8:	4b19      	ldr	r3, [pc, #100]	; (8001750 <HAL_RCC_GetSysClockFreq+0x10c>)
 80016ea:	617b      	str	r3, [r7, #20]
      break;
 80016ec:	e005      	b.n	80016fa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80016ee:	4b19      	ldr	r3, [pc, #100]	; (8001754 <HAL_RCC_GetSysClockFreq+0x110>)
 80016f0:	617b      	str	r3, [r7, #20]
      break;
 80016f2:	e002      	b.n	80016fa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	617b      	str	r3, [r7, #20]
      break;
 80016f8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80016fa:	4b13      	ldr	r3, [pc, #76]	; (8001748 <HAL_RCC_GetSysClockFreq+0x104>)
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	091b      	lsrs	r3, r3, #4
 8001700:	f003 0307 	and.w	r3, r3, #7
 8001704:	3301      	adds	r3, #1
 8001706:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001708:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <HAL_RCC_GetSysClockFreq+0x104>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	0a1b      	lsrs	r3, r3, #8
 800170e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	fb02 f203 	mul.w	r2, r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	fbb2 f3f3 	udiv	r3, r2, r3
 800171e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001720:	4b09      	ldr	r3, [pc, #36]	; (8001748 <HAL_RCC_GetSysClockFreq+0x104>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	0e5b      	lsrs	r3, r3, #25
 8001726:	f003 0303 	and.w	r3, r3, #3
 800172a:	3301      	adds	r3, #1
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	fbb2 f3f3 	udiv	r3, r2, r3
 8001738:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800173a:	69bb      	ldr	r3, [r7, #24]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3724      	adds	r7, #36	; 0x24
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	40021000 	.word	0x40021000
 800174c:	08004960 	.word	0x08004960
 8001750:	00f42400 	.word	0x00f42400
 8001754:	007a1200 	.word	0x007a1200

08001758 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800175c:	4b03      	ldr	r3, [pc, #12]	; (800176c <HAL_RCC_GetHCLKFreq+0x14>)
 800175e:	681b      	ldr	r3, [r3, #0]
}
 8001760:	4618      	mov	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20000000 	.word	0x20000000

08001770 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001774:	f7ff fff0 	bl	8001758 <HAL_RCC_GetHCLKFreq>
 8001778:	4601      	mov	r1, r0
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <HAL_RCC_GetPCLK1Freq+0x24>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	0a1b      	lsrs	r3, r3, #8
 8001780:	f003 0307 	and.w	r3, r3, #7
 8001784:	4a04      	ldr	r2, [pc, #16]	; (8001798 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001786:	5cd3      	ldrb	r3, [r2, r3]
 8001788:	f003 031f 	and.w	r3, r3, #31
 800178c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001790:	4618      	mov	r0, r3
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40021000 	.word	0x40021000
 8001798:	08004958 	.word	0x08004958

0800179c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	220f      	movs	r2, #15
 80017aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <HAL_RCC_GetClockConfig+0x5c>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 0203 	and.w	r2, r3, #3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80017b8:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <HAL_RCC_GetClockConfig+0x5c>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <HAL_RCC_GetClockConfig+0x5c>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80017d0:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HAL_RCC_GetClockConfig+0x5c>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	08db      	lsrs	r3, r3, #3
 80017d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80017de:	4b07      	ldr	r3, [pc, #28]	; (80017fc <HAL_RCC_GetClockConfig+0x60>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0207 	and.w	r2, r3, #7
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	601a      	str	r2, [r3, #0]
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40022000 	.word	0x40022000

08001800 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001808:	2300      	movs	r3, #0
 800180a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800180c:	4b2a      	ldr	r3, [pc, #168]	; (80018b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800180e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d003      	beq.n	8001820 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001818:	f7ff f9e8 	bl	8000bec <HAL_PWREx_GetVoltageRange>
 800181c:	6178      	str	r0, [r7, #20]
 800181e:	e014      	b.n	800184a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001820:	4b25      	ldr	r3, [pc, #148]	; (80018b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001824:	4a24      	ldr	r2, [pc, #144]	; (80018b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800182a:	6593      	str	r3, [r2, #88]	; 0x58
 800182c:	4b22      	ldr	r3, [pc, #136]	; (80018b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800182e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001838:	f7ff f9d8 	bl	8000bec <HAL_PWREx_GetVoltageRange>
 800183c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800183e:	4b1e      	ldr	r3, [pc, #120]	; (80018b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001842:	4a1d      	ldr	r2, [pc, #116]	; (80018b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001844:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001848:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001850:	d10b      	bne.n	800186a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b80      	cmp	r3, #128	; 0x80
 8001856:	d919      	bls.n	800188c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2ba0      	cmp	r3, #160	; 0xa0
 800185c:	d902      	bls.n	8001864 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800185e:	2302      	movs	r3, #2
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	e013      	b.n	800188c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001864:	2301      	movs	r3, #1
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	e010      	b.n	800188c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b80      	cmp	r3, #128	; 0x80
 800186e:	d902      	bls.n	8001876 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001870:	2303      	movs	r3, #3
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	e00a      	b.n	800188c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2b80      	cmp	r3, #128	; 0x80
 800187a:	d102      	bne.n	8001882 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800187c:	2302      	movs	r3, #2
 800187e:	613b      	str	r3, [r7, #16]
 8001880:	e004      	b.n	800188c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b70      	cmp	r3, #112	; 0x70
 8001886:	d101      	bne.n	800188c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001888:	2301      	movs	r3, #1
 800188a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800188c:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f023 0207 	bic.w	r2, r3, #7
 8001894:	4909      	ldr	r1, [pc, #36]	; (80018bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800189c:	4b07      	ldr	r3, [pc, #28]	; (80018bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d001      	beq.n	80018ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e000      	b.n	80018b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40022000 	.word	0x40022000

080018c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e01d      	b.n	800190e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d106      	bne.n	80018ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 f815 	bl	8001916 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2202      	movs	r2, #2
 80018f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3304      	adds	r3, #4
 80018fc:	4619      	mov	r1, r3
 80018fe:	4610      	mov	r0, r2
 8001900:	f000 f986 	bl	8001c10 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
	...

0800192c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	68da      	ldr	r2, [r3, #12]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f042 0201 	orr.w	r2, r2, #1
 8001942:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689a      	ldr	r2, [r3, #8]
 800194a:	4b0c      	ldr	r3, [pc, #48]	; (800197c <HAL_TIM_Base_Start_IT+0x50>)
 800194c:	4013      	ands	r3, r2
 800194e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2b06      	cmp	r3, #6
 8001954:	d00b      	beq.n	800196e <HAL_TIM_Base_Start_IT+0x42>
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800195c:	d007      	beq.n	800196e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f042 0201 	orr.w	r2, r2, #1
 800196c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	00010007 	.word	0x00010007

08001980 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b02      	cmp	r3, #2
 8001994:	d122      	bne.n	80019dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d11b      	bne.n	80019dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f06f 0202 	mvn.w	r2, #2
 80019ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2201      	movs	r2, #1
 80019b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 f905 	bl	8001bd2 <HAL_TIM_IC_CaptureCallback>
 80019c8:	e005      	b.n	80019d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 f8f7 	bl	8001bbe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 f908 	bl	8001be6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	f003 0304 	and.w	r3, r3, #4
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	d122      	bne.n	8001a30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b04      	cmp	r3, #4
 80019f6:	d11b      	bne.n	8001a30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f06f 0204 	mvn.w	r2, #4
 8001a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2202      	movs	r2, #2
 8001a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f000 f8db 	bl	8001bd2 <HAL_TIM_IC_CaptureCallback>
 8001a1c:	e005      	b.n	8001a2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f000 f8cd 	bl	8001bbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f000 f8de 	bl	8001be6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	2b08      	cmp	r3, #8
 8001a3c:	d122      	bne.n	8001a84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	f003 0308 	and.w	r3, r3, #8
 8001a48:	2b08      	cmp	r3, #8
 8001a4a:	d11b      	bne.n	8001a84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f06f 0208 	mvn.w	r2, #8
 8001a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2204      	movs	r2, #4
 8001a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	f003 0303 	and.w	r3, r3, #3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 f8b1 	bl	8001bd2 <HAL_TIM_IC_CaptureCallback>
 8001a70:	e005      	b.n	8001a7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f8a3 	bl	8001bbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 f8b4 	bl	8001be6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	f003 0310 	and.w	r3, r3, #16
 8001a8e:	2b10      	cmp	r3, #16
 8001a90:	d122      	bne.n	8001ad8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	f003 0310 	and.w	r3, r3, #16
 8001a9c:	2b10      	cmp	r3, #16
 8001a9e:	d11b      	bne.n	8001ad8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f06f 0210 	mvn.w	r2, #16
 8001aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2208      	movs	r2, #8
 8001aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 f887 	bl	8001bd2 <HAL_TIM_IC_CaptureCallback>
 8001ac4:	e005      	b.n	8001ad2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f879 	bl	8001bbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 f88a 	bl	8001be6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d10e      	bne.n	8001b04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d107      	bne.n	8001b04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f06f 0201 	mvn.w	r2, #1
 8001afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7fe fc66 	bl	80003d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b0e:	2b80      	cmp	r3, #128	; 0x80
 8001b10:	d10e      	bne.n	8001b30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b1c:	2b80      	cmp	r3, #128	; 0x80
 8001b1e:	d107      	bne.n	8001b30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 f914 	bl	8001d58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b3e:	d10e      	bne.n	8001b5e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b4a:	2b80      	cmp	r3, #128	; 0x80
 8001b4c:	d107      	bne.n	8001b5e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 f907 	bl	8001d6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b68:	2b40      	cmp	r3, #64	; 0x40
 8001b6a:	d10e      	bne.n	8001b8a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b76:	2b40      	cmp	r3, #64	; 0x40
 8001b78:	d107      	bne.n	8001b8a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 f838 	bl	8001bfa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	f003 0320 	and.w	r3, r3, #32
 8001b94:	2b20      	cmp	r3, #32
 8001b96:	d10e      	bne.n	8001bb6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	f003 0320 	and.w	r3, r3, #32
 8001ba2:	2b20      	cmp	r3, #32
 8001ba4:	d107      	bne.n	8001bb6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f06f 0220 	mvn.w	r2, #32
 8001bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f8c7 	bl	8001d44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
	...

08001c10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a40      	ldr	r2, [pc, #256]	; (8001d24 <TIM_Base_SetConfig+0x114>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d013      	beq.n	8001c50 <TIM_Base_SetConfig+0x40>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c2e:	d00f      	beq.n	8001c50 <TIM_Base_SetConfig+0x40>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a3d      	ldr	r2, [pc, #244]	; (8001d28 <TIM_Base_SetConfig+0x118>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d00b      	beq.n	8001c50 <TIM_Base_SetConfig+0x40>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a3c      	ldr	r2, [pc, #240]	; (8001d2c <TIM_Base_SetConfig+0x11c>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d007      	beq.n	8001c50 <TIM_Base_SetConfig+0x40>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a3b      	ldr	r2, [pc, #236]	; (8001d30 <TIM_Base_SetConfig+0x120>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d003      	beq.n	8001c50 <TIM_Base_SetConfig+0x40>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a3a      	ldr	r2, [pc, #232]	; (8001d34 <TIM_Base_SetConfig+0x124>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d108      	bne.n	8001c62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a2f      	ldr	r2, [pc, #188]	; (8001d24 <TIM_Base_SetConfig+0x114>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d01f      	beq.n	8001caa <TIM_Base_SetConfig+0x9a>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c70:	d01b      	beq.n	8001caa <TIM_Base_SetConfig+0x9a>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a2c      	ldr	r2, [pc, #176]	; (8001d28 <TIM_Base_SetConfig+0x118>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d017      	beq.n	8001caa <TIM_Base_SetConfig+0x9a>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a2b      	ldr	r2, [pc, #172]	; (8001d2c <TIM_Base_SetConfig+0x11c>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d013      	beq.n	8001caa <TIM_Base_SetConfig+0x9a>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a2a      	ldr	r2, [pc, #168]	; (8001d30 <TIM_Base_SetConfig+0x120>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d00f      	beq.n	8001caa <TIM_Base_SetConfig+0x9a>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a29      	ldr	r2, [pc, #164]	; (8001d34 <TIM_Base_SetConfig+0x124>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d00b      	beq.n	8001caa <TIM_Base_SetConfig+0x9a>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a28      	ldr	r2, [pc, #160]	; (8001d38 <TIM_Base_SetConfig+0x128>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d007      	beq.n	8001caa <TIM_Base_SetConfig+0x9a>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a27      	ldr	r2, [pc, #156]	; (8001d3c <TIM_Base_SetConfig+0x12c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d003      	beq.n	8001caa <TIM_Base_SetConfig+0x9a>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a26      	ldr	r2, [pc, #152]	; (8001d40 <TIM_Base_SetConfig+0x130>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d108      	bne.n	8001cbc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a10      	ldr	r2, [pc, #64]	; (8001d24 <TIM_Base_SetConfig+0x114>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d00f      	beq.n	8001d08 <TIM_Base_SetConfig+0xf8>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a12      	ldr	r2, [pc, #72]	; (8001d34 <TIM_Base_SetConfig+0x124>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d00b      	beq.n	8001d08 <TIM_Base_SetConfig+0xf8>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a11      	ldr	r2, [pc, #68]	; (8001d38 <TIM_Base_SetConfig+0x128>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d007      	beq.n	8001d08 <TIM_Base_SetConfig+0xf8>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a10      	ldr	r2, [pc, #64]	; (8001d3c <TIM_Base_SetConfig+0x12c>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d003      	beq.n	8001d08 <TIM_Base_SetConfig+0xf8>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a0f      	ldr	r2, [pc, #60]	; (8001d40 <TIM_Base_SetConfig+0x130>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d103      	bne.n	8001d10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	691a      	ldr	r2, [r3, #16]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	615a      	str	r2, [r3, #20]
}
 8001d16:	bf00      	nop
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40012c00 	.word	0x40012c00
 8001d28:	40000400 	.word	0x40000400
 8001d2c:	40000800 	.word	0x40000800
 8001d30:	40000c00 	.word	0x40000c00
 8001d34:	40013400 	.word	0x40013400
 8001d38:	40014000 	.word	0x40014000
 8001d3c:	40014400 	.word	0x40014400
 8001d40:	40014800 	.word	0x40014800

08001d44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d96:	f3ef 8305 	mrs	r3, IPSR
 8001d9a:	60bb      	str	r3, [r7, #8]
  return(result);
 8001d9c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10f      	bne.n	8001dc2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001da2:	f3ef 8310 	mrs	r3, PRIMASK
 8001da6:	607b      	str	r3, [r7, #4]
  return(result);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d105      	bne.n	8001dba <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001dae:	f3ef 8311 	mrs	r3, BASEPRI
 8001db2:	603b      	str	r3, [r7, #0]
  return(result);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d007      	beq.n	8001dca <osKernelInitialize+0x3a>
 8001dba:	4b0e      	ldr	r3, [pc, #56]	; (8001df4 <osKernelInitialize+0x64>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d103      	bne.n	8001dca <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001dc2:	f06f 0305 	mvn.w	r3, #5
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	e00c      	b.n	8001de4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001dca:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <osKernelInitialize+0x64>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d105      	bne.n	8001dde <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001dd2:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <osKernelInitialize+0x64>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	e002      	b.n	8001de4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001dde:	f04f 33ff 	mov.w	r3, #4294967295
 8001de2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001de4:	68fb      	ldr	r3, [r7, #12]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	2000002c 	.word	0x2000002c

08001df8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001dfe:	f3ef 8305 	mrs	r3, IPSR
 8001e02:	60bb      	str	r3, [r7, #8]
  return(result);
 8001e04:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d10f      	bne.n	8001e2a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e0a:	f3ef 8310 	mrs	r3, PRIMASK
 8001e0e:	607b      	str	r3, [r7, #4]
  return(result);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d105      	bne.n	8001e22 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001e16:	f3ef 8311 	mrs	r3, BASEPRI
 8001e1a:	603b      	str	r3, [r7, #0]
  return(result);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d007      	beq.n	8001e32 <osKernelStart+0x3a>
 8001e22:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <osKernelStart+0x68>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d103      	bne.n	8001e32 <osKernelStart+0x3a>
    stat = osErrorISR;
 8001e2a:	f06f 0305 	mvn.w	r3, #5
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	e010      	b.n	8001e54 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001e32:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <osKernelStart+0x68>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d109      	bne.n	8001e4e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001e3a:	f7ff ffa1 	bl	8001d80 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001e3e:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <osKernelStart+0x68>)
 8001e40:	2202      	movs	r2, #2
 8001e42:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001e44:	f001 f870 	bl	8002f28 <vTaskStartScheduler>
      stat = osOK;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	e002      	b.n	8001e54 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8001e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e52:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001e54:	68fb      	ldr	r3, [r7, #12]
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	2000002c 	.word	0x2000002c

08001e64 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b090      	sub	sp, #64	; 0x40
 8001e68:	af04      	add	r7, sp, #16
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e74:	f3ef 8305 	mrs	r3, IPSR
 8001e78:	61fb      	str	r3, [r7, #28]
  return(result);
 8001e7a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f040 808f 	bne.w	8001fa0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e82:	f3ef 8310 	mrs	r3, PRIMASK
 8001e86:	61bb      	str	r3, [r7, #24]
  return(result);
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d105      	bne.n	8001e9a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001e8e:	f3ef 8311 	mrs	r3, BASEPRI
 8001e92:	617b      	str	r3, [r7, #20]
  return(result);
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <osThreadNew+0x3e>
 8001e9a:	4b44      	ldr	r3, [pc, #272]	; (8001fac <osThreadNew+0x148>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d07e      	beq.n	8001fa0 <osThreadNew+0x13c>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d07b      	beq.n	8001fa0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8001ea8:	2380      	movs	r3, #128	; 0x80
 8001eaa:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8001eac:	2318      	movs	r3, #24
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8001eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d045      	beq.n	8001f4c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d002      	beq.n	8001ece <osThreadNew+0x6a>
        name = attr->name;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d002      	beq.n	8001edc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d008      	beq.n	8001ef4 <osThreadNew+0x90>
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	2b38      	cmp	r3, #56	; 0x38
 8001ee6:	d805      	bhi.n	8001ef4 <osThreadNew+0x90>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <osThreadNew+0x94>
        return (NULL);
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	e054      	b.n	8001fa2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	695b      	ldr	r3, [r3, #20]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	089b      	lsrs	r3, r3, #2
 8001f06:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00e      	beq.n	8001f2e <osThreadNew+0xca>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	2b5b      	cmp	r3, #91	; 0x5b
 8001f16:	d90a      	bls.n	8001f2e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d006      	beq.n	8001f2e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d002      	beq.n	8001f2e <osThreadNew+0xca>
        mem = 1;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	623b      	str	r3, [r7, #32]
 8001f2c:	e010      	b.n	8001f50 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10c      	bne.n	8001f50 <osThreadNew+0xec>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d108      	bne.n	8001f50 <osThreadNew+0xec>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d104      	bne.n	8001f50 <osThreadNew+0xec>
          mem = 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	623b      	str	r3, [r7, #32]
 8001f4a:	e001      	b.n	8001f50 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8001f50:	6a3b      	ldr	r3, [r7, #32]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d110      	bne.n	8001f78 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001f5e:	9202      	str	r2, [sp, #8]
 8001f60:	9301      	str	r3, [sp, #4]
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f000 fe09 	bl	8002b84 <xTaskCreateStatic>
 8001f72:	4603      	mov	r3, r0
 8001f74:	613b      	str	r3, [r7, #16]
 8001f76:	e013      	b.n	8001fa0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8001f78:	6a3b      	ldr	r3, [r7, #32]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d110      	bne.n	8001fa0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	f107 0310 	add.w	r3, r7, #16
 8001f86:	9301      	str	r3, [sp, #4]
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	9300      	str	r3, [sp, #0]
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f000 fe51 	bl	8002c38 <xTaskCreate>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d001      	beq.n	8001fa0 <osThreadNew+0x13c>
          hTask = NULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001fa0:	693b      	ldr	r3, [r7, #16]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3730      	adds	r7, #48	; 0x30
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	2000002c 	.word	0x2000002c

08001fb0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fb8:	f3ef 8305 	mrs	r3, IPSR
 8001fbc:	613b      	str	r3, [r7, #16]
  return(result);
 8001fbe:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d10f      	bne.n	8001fe4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fc4:	f3ef 8310 	mrs	r3, PRIMASK
 8001fc8:	60fb      	str	r3, [r7, #12]
  return(result);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d105      	bne.n	8001fdc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001fd0:	f3ef 8311 	mrs	r3, BASEPRI
 8001fd4:	60bb      	str	r3, [r7, #8]
  return(result);
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d007      	beq.n	8001fec <osDelay+0x3c>
 8001fdc:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <osDelay+0x58>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d103      	bne.n	8001fec <osDelay+0x3c>
    stat = osErrorISR;
 8001fe4:	f06f 0305 	mvn.w	r3, #5
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	e007      	b.n	8001ffc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d002      	beq.n	8001ffc <osDelay+0x4c>
      vTaskDelay(ticks);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 ff62 	bl	8002ec0 <vTaskDelay>
    }
  }

  return (stat);
 8001ffc:	697b      	ldr	r3, [r7, #20]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	2000002c 	.word	0x2000002c

0800200c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	4a07      	ldr	r2, [pc, #28]	; (8002038 <vApplicationGetIdleTaskMemory+0x2c>)
 800201c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	4a06      	ldr	r2, [pc, #24]	; (800203c <vApplicationGetIdleTaskMemory+0x30>)
 8002022:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2280      	movs	r2, #128	; 0x80
 8002028:	601a      	str	r2, [r3, #0]
}
 800202a:	bf00      	nop
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	20000030 	.word	0x20000030
 800203c:	2000008c 	.word	0x2000008c

08002040 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4a07      	ldr	r2, [pc, #28]	; (800206c <vApplicationGetTimerTaskMemory+0x2c>)
 8002050:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	4a06      	ldr	r2, [pc, #24]	; (8002070 <vApplicationGetTimerTaskMemory+0x30>)
 8002056:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800205e:	601a      	str	r2, [r3, #0]
}
 8002060:	bf00      	nop
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	2000028c 	.word	0x2000028c
 8002070:	200002e8 	.word	0x200002e8

08002074 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f103 0208 	add.w	r2, r3, #8
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f04f 32ff 	mov.w	r2, #4294967295
 800208c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f103 0208 	add.w	r2, r3, #8
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f103 0208 	add.w	r2, r3, #8
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80020ce:	b480      	push	{r7}
 80020d0:	b085      	sub	sp, #20
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
 80020d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	1c5a      	adds	r2, r3, #1
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	601a      	str	r2, [r3, #0]
}
 800210a:	bf00      	nop
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002116:	b480      	push	{r7}
 8002118:	b085      	sub	sp, #20
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
 800211e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800212c:	d103      	bne.n	8002136 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	e00c      	b.n	8002150 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	3308      	adds	r3, #8
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	e002      	b.n	8002144 <vListInsert+0x2e>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	429a      	cmp	r2, r3
 800214e:	d2f6      	bcs.n	800213e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	1c5a      	adds	r2, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	601a      	str	r2, [r3, #0]
}
 800217c:	bf00      	nop
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6892      	ldr	r2, [r2, #8]
 800219e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	6852      	ldr	r2, [r2, #4]
 80021a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d103      	bne.n	80021bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	1e5a      	subs	r2, r3, #1
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d109      	bne.n	8002204 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80021f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021f4:	f383 8811 	msr	BASEPRI, r3
 80021f8:	f3bf 8f6f 	isb	sy
 80021fc:	f3bf 8f4f 	dsb	sy
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	e7fe      	b.n	8002202 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002204:	f002 f812 	bl	800422c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002210:	68f9      	ldr	r1, [r7, #12]
 8002212:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002214:	fb01 f303 	mul.w	r3, r1, r3
 8002218:	441a      	add	r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002234:	3b01      	subs	r3, #1
 8002236:	68f9      	ldr	r1, [r7, #12]
 8002238:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800223a:	fb01 f303 	mul.w	r3, r1, r3
 800223e:	441a      	add	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	22ff      	movs	r2, #255	; 0xff
 8002248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	22ff      	movs	r2, #255	; 0xff
 8002250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d114      	bne.n	8002284 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d01a      	beq.n	8002298 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	3310      	adds	r3, #16
 8002266:	4618      	mov	r0, r3
 8002268:	f001 f8de 	bl	8003428 <xTaskRemoveFromEventList>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d012      	beq.n	8002298 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002272:	4b0d      	ldr	r3, [pc, #52]	; (80022a8 <xQueueGenericReset+0xcc>)
 8002274:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	f3bf 8f4f 	dsb	sy
 800227e:	f3bf 8f6f 	isb	sy
 8002282:	e009      	b.n	8002298 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	3310      	adds	r3, #16
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff fef3 	bl	8002074 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	3324      	adds	r3, #36	; 0x24
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff feee 	bl	8002074 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002298:	f001 fff6 	bl	8004288 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800229c:	2301      	movs	r3, #1
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	e000ed04 	.word	0xe000ed04

080022ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08e      	sub	sp, #56	; 0x38
 80022b0:	af02      	add	r7, sp, #8
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
 80022b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d109      	bne.n	80022d4 <xQueueGenericCreateStatic+0x28>
 80022c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c4:	f383 8811 	msr	BASEPRI, r3
 80022c8:	f3bf 8f6f 	isb	sy
 80022cc:	f3bf 8f4f 	dsb	sy
 80022d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80022d2:	e7fe      	b.n	80022d2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d109      	bne.n	80022ee <xQueueGenericCreateStatic+0x42>
 80022da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022de:	f383 8811 	msr	BASEPRI, r3
 80022e2:	f3bf 8f6f 	isb	sy
 80022e6:	f3bf 8f4f 	dsb	sy
 80022ea:	627b      	str	r3, [r7, #36]	; 0x24
 80022ec:	e7fe      	b.n	80022ec <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d002      	beq.n	80022fa <xQueueGenericCreateStatic+0x4e>
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <xQueueGenericCreateStatic+0x52>
 80022fa:	2301      	movs	r3, #1
 80022fc:	e000      	b.n	8002300 <xQueueGenericCreateStatic+0x54>
 80022fe:	2300      	movs	r3, #0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d109      	bne.n	8002318 <xQueueGenericCreateStatic+0x6c>
 8002304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002308:	f383 8811 	msr	BASEPRI, r3
 800230c:	f3bf 8f6f 	isb	sy
 8002310:	f3bf 8f4f 	dsb	sy
 8002314:	623b      	str	r3, [r7, #32]
 8002316:	e7fe      	b.n	8002316 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d102      	bne.n	8002324 <xQueueGenericCreateStatic+0x78>
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <xQueueGenericCreateStatic+0x7c>
 8002324:	2301      	movs	r3, #1
 8002326:	e000      	b.n	800232a <xQueueGenericCreateStatic+0x7e>
 8002328:	2300      	movs	r3, #0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d109      	bne.n	8002342 <xQueueGenericCreateStatic+0x96>
 800232e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002332:	f383 8811 	msr	BASEPRI, r3
 8002336:	f3bf 8f6f 	isb	sy
 800233a:	f3bf 8f4f 	dsb	sy
 800233e:	61fb      	str	r3, [r7, #28]
 8002340:	e7fe      	b.n	8002340 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002342:	2350      	movs	r3, #80	; 0x50
 8002344:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	2b50      	cmp	r3, #80	; 0x50
 800234a:	d009      	beq.n	8002360 <xQueueGenericCreateStatic+0xb4>
 800234c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002350:	f383 8811 	msr	BASEPRI, r3
 8002354:	f3bf 8f6f 	isb	sy
 8002358:	f3bf 8f4f 	dsb	sy
 800235c:	61bb      	str	r3, [r7, #24]
 800235e:	e7fe      	b.n	800235e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002360:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00d      	beq.n	8002388 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800236c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002374:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	4613      	mov	r3, r2
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	68b9      	ldr	r1, [r7, #8]
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 f805 	bl	8002392 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800238a:	4618      	mov	r0, r3
 800238c:	3730      	adds	r7, #48	; 0x30
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b084      	sub	sp, #16
 8002396:	af00      	add	r7, sp, #0
 8002398:	60f8      	str	r0, [r7, #12]
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	607a      	str	r2, [r7, #4]
 800239e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d103      	bne.n	80023ae <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	e002      	b.n	80023b4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80023c0:	2101      	movs	r1, #1
 80023c2:	69b8      	ldr	r0, [r7, #24]
 80023c4:	f7ff ff0a 	bl	80021dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	78fa      	ldrb	r2, [r7, #3]
 80023cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80023d0:	bf00      	nop
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08e      	sub	sp, #56	; 0x38
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
 80023e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80023e6:	2300      	movs	r3, #0
 80023e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80023ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d109      	bne.n	8002408 <xQueueGenericSend+0x30>
 80023f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f8:	f383 8811 	msr	BASEPRI, r3
 80023fc:	f3bf 8f6f 	isb	sy
 8002400:	f3bf 8f4f 	dsb	sy
 8002404:	62bb      	str	r3, [r7, #40]	; 0x28
 8002406:	e7fe      	b.n	8002406 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d103      	bne.n	8002416 <xQueueGenericSend+0x3e>
 800240e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <xQueueGenericSend+0x42>
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <xQueueGenericSend+0x44>
 800241a:	2300      	movs	r3, #0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d109      	bne.n	8002434 <xQueueGenericSend+0x5c>
 8002420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002424:	f383 8811 	msr	BASEPRI, r3
 8002428:	f3bf 8f6f 	isb	sy
 800242c:	f3bf 8f4f 	dsb	sy
 8002430:	627b      	str	r3, [r7, #36]	; 0x24
 8002432:	e7fe      	b.n	8002432 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d103      	bne.n	8002442 <xQueueGenericSend+0x6a>
 800243a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800243c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243e:	2b01      	cmp	r3, #1
 8002440:	d101      	bne.n	8002446 <xQueueGenericSend+0x6e>
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <xQueueGenericSend+0x70>
 8002446:	2300      	movs	r3, #0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d109      	bne.n	8002460 <xQueueGenericSend+0x88>
 800244c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002450:	f383 8811 	msr	BASEPRI, r3
 8002454:	f3bf 8f6f 	isb	sy
 8002458:	f3bf 8f4f 	dsb	sy
 800245c:	623b      	str	r3, [r7, #32]
 800245e:	e7fe      	b.n	800245e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002460:	f001 f998 	bl	8003794 <xTaskGetSchedulerState>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d102      	bne.n	8002470 <xQueueGenericSend+0x98>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <xQueueGenericSend+0x9c>
 8002470:	2301      	movs	r3, #1
 8002472:	e000      	b.n	8002476 <xQueueGenericSend+0x9e>
 8002474:	2300      	movs	r3, #0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d109      	bne.n	800248e <xQueueGenericSend+0xb6>
 800247a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800247e:	f383 8811 	msr	BASEPRI, r3
 8002482:	f3bf 8f6f 	isb	sy
 8002486:	f3bf 8f4f 	dsb	sy
 800248a:	61fb      	str	r3, [r7, #28]
 800248c:	e7fe      	b.n	800248c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800248e:	f001 fecd 	bl	800422c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002494:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800249a:	429a      	cmp	r2, r3
 800249c:	d302      	bcc.n	80024a4 <xQueueGenericSend+0xcc>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d129      	bne.n	80024f8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	68b9      	ldr	r1, [r7, #8]
 80024a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024aa:	f000 f9ff 	bl	80028ac <prvCopyDataToQueue>
 80024ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d010      	beq.n	80024da <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80024b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ba:	3324      	adds	r3, #36	; 0x24
 80024bc:	4618      	mov	r0, r3
 80024be:	f000 ffb3 	bl	8003428 <xTaskRemoveFromEventList>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d013      	beq.n	80024f0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80024c8:	4b3f      	ldr	r3, [pc, #252]	; (80025c8 <xQueueGenericSend+0x1f0>)
 80024ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	f3bf 8f4f 	dsb	sy
 80024d4:	f3bf 8f6f 	isb	sy
 80024d8:	e00a      	b.n	80024f0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80024da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d007      	beq.n	80024f0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80024e0:	4b39      	ldr	r3, [pc, #228]	; (80025c8 <xQueueGenericSend+0x1f0>)
 80024e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	f3bf 8f4f 	dsb	sy
 80024ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80024f0:	f001 feca 	bl	8004288 <vPortExitCritical>
				return pdPASS;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e063      	b.n	80025c0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d103      	bne.n	8002506 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80024fe:	f001 fec3 	bl	8004288 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002502:	2300      	movs	r3, #0
 8002504:	e05c      	b.n	80025c0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002508:	2b00      	cmp	r3, #0
 800250a:	d106      	bne.n	800251a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800250c:	f107 0314 	add.w	r3, r7, #20
 8002510:	4618      	mov	r0, r3
 8002512:	f000 ffeb 	bl	80034ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002516:	2301      	movs	r3, #1
 8002518:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800251a:	f001 feb5 	bl	8004288 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800251e:	f000 fd67 	bl	8002ff0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002522:	f001 fe83 	bl	800422c <vPortEnterCritical>
 8002526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002528:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800252c:	b25b      	sxtb	r3, r3
 800252e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002532:	d103      	bne.n	800253c <xQueueGenericSend+0x164>
 8002534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800253c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002542:	b25b      	sxtb	r3, r3
 8002544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002548:	d103      	bne.n	8002552 <xQueueGenericSend+0x17a>
 800254a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002552:	f001 fe99 	bl	8004288 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002556:	1d3a      	adds	r2, r7, #4
 8002558:	f107 0314 	add.w	r3, r7, #20
 800255c:	4611      	mov	r1, r2
 800255e:	4618      	mov	r0, r3
 8002560:	f000 ffda 	bl	8003518 <xTaskCheckForTimeOut>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d124      	bne.n	80025b4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800256a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800256c:	f000 fa96 	bl	8002a9c <prvIsQueueFull>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d018      	beq.n	80025a8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002578:	3310      	adds	r3, #16
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	4611      	mov	r1, r2
 800257e:	4618      	mov	r0, r3
 8002580:	f000 ff04 	bl	800338c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002584:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002586:	f000 fa21 	bl	80029cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800258a:	f000 fd3f 	bl	800300c <xTaskResumeAll>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	f47f af7c 	bne.w	800248e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002596:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <xQueueGenericSend+0x1f0>)
 8002598:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	f3bf 8f4f 	dsb	sy
 80025a2:	f3bf 8f6f 	isb	sy
 80025a6:	e772      	b.n	800248e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80025a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025aa:	f000 fa0f 	bl	80029cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80025ae:	f000 fd2d 	bl	800300c <xTaskResumeAll>
 80025b2:	e76c      	b.n	800248e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80025b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025b6:	f000 fa09 	bl	80029cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80025ba:	f000 fd27 	bl	800300c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80025be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3738      	adds	r7, #56	; 0x38
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	e000ed04 	.word	0xe000ed04

080025cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08e      	sub	sp, #56	; 0x38
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
 80025d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80025de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d109      	bne.n	80025f8 <xQueueGenericSendFromISR+0x2c>
 80025e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e8:	f383 8811 	msr	BASEPRI, r3
 80025ec:	f3bf 8f6f 	isb	sy
 80025f0:	f3bf 8f4f 	dsb	sy
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24
 80025f6:	e7fe      	b.n	80025f6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d103      	bne.n	8002606 <xQueueGenericSendFromISR+0x3a>
 80025fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <xQueueGenericSendFromISR+0x3e>
 8002606:	2301      	movs	r3, #1
 8002608:	e000      	b.n	800260c <xQueueGenericSendFromISR+0x40>
 800260a:	2300      	movs	r3, #0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d109      	bne.n	8002624 <xQueueGenericSendFromISR+0x58>
 8002610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002614:	f383 8811 	msr	BASEPRI, r3
 8002618:	f3bf 8f6f 	isb	sy
 800261c:	f3bf 8f4f 	dsb	sy
 8002620:	623b      	str	r3, [r7, #32]
 8002622:	e7fe      	b.n	8002622 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d103      	bne.n	8002632 <xQueueGenericSendFromISR+0x66>
 800262a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262e:	2b01      	cmp	r3, #1
 8002630:	d101      	bne.n	8002636 <xQueueGenericSendFromISR+0x6a>
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <xQueueGenericSendFromISR+0x6c>
 8002636:	2300      	movs	r3, #0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d109      	bne.n	8002650 <xQueueGenericSendFromISR+0x84>
 800263c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002640:	f383 8811 	msr	BASEPRI, r3
 8002644:	f3bf 8f6f 	isb	sy
 8002648:	f3bf 8f4f 	dsb	sy
 800264c:	61fb      	str	r3, [r7, #28]
 800264e:	e7fe      	b.n	800264e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002650:	f001 fec8 	bl	80043e4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002654:	f3ef 8211 	mrs	r2, BASEPRI
 8002658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800265c:	f383 8811 	msr	BASEPRI, r3
 8002660:	f3bf 8f6f 	isb	sy
 8002664:	f3bf 8f4f 	dsb	sy
 8002668:	61ba      	str	r2, [r7, #24]
 800266a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800266c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800266e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002672:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002678:	429a      	cmp	r2, r3
 800267a:	d302      	bcc.n	8002682 <xQueueGenericSendFromISR+0xb6>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	2b02      	cmp	r3, #2
 8002680:	d12c      	bne.n	80026dc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002684:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002688:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	68b9      	ldr	r1, [r7, #8]
 8002690:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002692:	f000 f90b 	bl	80028ac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002696:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800269a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269e:	d112      	bne.n	80026c6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d016      	beq.n	80026d6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026aa:	3324      	adds	r3, #36	; 0x24
 80026ac:	4618      	mov	r0, r3
 80026ae:	f000 febb 	bl	8003428 <xTaskRemoveFromEventList>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00e      	beq.n	80026d6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00b      	beq.n	80026d6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	e007      	b.n	80026d6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80026c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80026ca:	3301      	adds	r3, #1
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	b25a      	sxtb	r2, r3
 80026d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80026d6:	2301      	movs	r3, #1
 80026d8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80026da:	e001      	b.n	80026e0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80026dc:	2300      	movs	r3, #0
 80026de:	637b      	str	r3, [r7, #52]	; 0x34
 80026e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80026ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3738      	adds	r7, #56	; 0x38
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b08c      	sub	sp, #48	; 0x30
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002700:	2300      	movs	r3, #0
 8002702:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270a:	2b00      	cmp	r3, #0
 800270c:	d109      	bne.n	8002722 <xQueueReceive+0x2e>
	__asm volatile
 800270e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002712:	f383 8811 	msr	BASEPRI, r3
 8002716:	f3bf 8f6f 	isb	sy
 800271a:	f3bf 8f4f 	dsb	sy
 800271e:	623b      	str	r3, [r7, #32]
 8002720:	e7fe      	b.n	8002720 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d103      	bne.n	8002730 <xQueueReceive+0x3c>
 8002728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <xQueueReceive+0x40>
 8002730:	2301      	movs	r3, #1
 8002732:	e000      	b.n	8002736 <xQueueReceive+0x42>
 8002734:	2300      	movs	r3, #0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d109      	bne.n	800274e <xQueueReceive+0x5a>
 800273a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800273e:	f383 8811 	msr	BASEPRI, r3
 8002742:	f3bf 8f6f 	isb	sy
 8002746:	f3bf 8f4f 	dsb	sy
 800274a:	61fb      	str	r3, [r7, #28]
 800274c:	e7fe      	b.n	800274c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800274e:	f001 f821 	bl	8003794 <xTaskGetSchedulerState>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d102      	bne.n	800275e <xQueueReceive+0x6a>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <xQueueReceive+0x6e>
 800275e:	2301      	movs	r3, #1
 8002760:	e000      	b.n	8002764 <xQueueReceive+0x70>
 8002762:	2300      	movs	r3, #0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d109      	bne.n	800277c <xQueueReceive+0x88>
 8002768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800276c:	f383 8811 	msr	BASEPRI, r3
 8002770:	f3bf 8f6f 	isb	sy
 8002774:	f3bf 8f4f 	dsb	sy
 8002778:	61bb      	str	r3, [r7, #24]
 800277a:	e7fe      	b.n	800277a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800277c:	f001 fd56 	bl	800422c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002784:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	2b00      	cmp	r3, #0
 800278a:	d01f      	beq.n	80027cc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800278c:	68b9      	ldr	r1, [r7, #8]
 800278e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002790:	f000 f8f6 	bl	8002980 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	1e5a      	subs	r2, r3, #1
 8002798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800279c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00f      	beq.n	80027c4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a6:	3310      	adds	r3, #16
 80027a8:	4618      	mov	r0, r3
 80027aa:	f000 fe3d 	bl	8003428 <xTaskRemoveFromEventList>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d007      	beq.n	80027c4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80027b4:	4b3c      	ldr	r3, [pc, #240]	; (80028a8 <xQueueReceive+0x1b4>)
 80027b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	f3bf 8f4f 	dsb	sy
 80027c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80027c4:	f001 fd60 	bl	8004288 <vPortExitCritical>
				return pdPASS;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e069      	b.n	80028a0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d103      	bne.n	80027da <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80027d2:	f001 fd59 	bl	8004288 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80027d6:	2300      	movs	r3, #0
 80027d8:	e062      	b.n	80028a0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80027da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d106      	bne.n	80027ee <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80027e0:	f107 0310 	add.w	r3, r7, #16
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 fe81 	bl	80034ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80027ea:	2301      	movs	r3, #1
 80027ec:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80027ee:	f001 fd4b 	bl	8004288 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80027f2:	f000 fbfd 	bl	8002ff0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80027f6:	f001 fd19 	bl	800422c <vPortEnterCritical>
 80027fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002800:	b25b      	sxtb	r3, r3
 8002802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002806:	d103      	bne.n	8002810 <xQueueReceive+0x11c>
 8002808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002812:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002816:	b25b      	sxtb	r3, r3
 8002818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281c:	d103      	bne.n	8002826 <xQueueReceive+0x132>
 800281e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002826:	f001 fd2f 	bl	8004288 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800282a:	1d3a      	adds	r2, r7, #4
 800282c:	f107 0310 	add.w	r3, r7, #16
 8002830:	4611      	mov	r1, r2
 8002832:	4618      	mov	r0, r3
 8002834:	f000 fe70 	bl	8003518 <xTaskCheckForTimeOut>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d123      	bne.n	8002886 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800283e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002840:	f000 f916 	bl	8002a70 <prvIsQueueEmpty>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d017      	beq.n	800287a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800284a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284c:	3324      	adds	r3, #36	; 0x24
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	4611      	mov	r1, r2
 8002852:	4618      	mov	r0, r3
 8002854:	f000 fd9a 	bl	800338c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800285a:	f000 f8b7 	bl	80029cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800285e:	f000 fbd5 	bl	800300c <xTaskResumeAll>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d189      	bne.n	800277c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002868:	4b0f      	ldr	r3, [pc, #60]	; (80028a8 <xQueueReceive+0x1b4>)
 800286a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	f3bf 8f4f 	dsb	sy
 8002874:	f3bf 8f6f 	isb	sy
 8002878:	e780      	b.n	800277c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800287a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800287c:	f000 f8a6 	bl	80029cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002880:	f000 fbc4 	bl	800300c <xTaskResumeAll>
 8002884:	e77a      	b.n	800277c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002886:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002888:	f000 f8a0 	bl	80029cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800288c:	f000 fbbe 	bl	800300c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002890:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002892:	f000 f8ed 	bl	8002a70 <prvIsQueueEmpty>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	f43f af6f 	beq.w	800277c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800289e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3730      	adds	r7, #48	; 0x30
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	e000ed04 	.word	0xe000ed04

080028ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80028b8:	2300      	movs	r3, #0
 80028ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10d      	bne.n	80028e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d14d      	bne.n	800296e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 ff7a 	bl	80037d0 <xTaskPriorityDisinherit>
 80028dc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	e043      	b.n	800296e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d119      	bne.n	8002920 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6858      	ldr	r0, [r3, #4]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f4:	461a      	mov	r2, r3
 80028f6:	68b9      	ldr	r1, [r7, #8]
 80028f8:	f001 ffac 	bl	8004854 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002904:	441a      	add	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	429a      	cmp	r2, r3
 8002914:	d32b      	bcc.n	800296e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	e026      	b.n	800296e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	68d8      	ldr	r0, [r3, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	461a      	mov	r2, r3
 800292a:	68b9      	ldr	r1, [r7, #8]
 800292c:	f001 ff92 	bl	8004854 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	68da      	ldr	r2, [r3, #12]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	425b      	negs	r3, r3
 800293a:	441a      	add	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	68da      	ldr	r2, [r3, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	d207      	bcs.n	800295c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	425b      	negs	r3, r3
 8002956:	441a      	add	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b02      	cmp	r3, #2
 8002960:	d105      	bne.n	800296e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d002      	beq.n	800296e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	3b01      	subs	r3, #1
 800296c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1c5a      	adds	r2, r3, #1
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002976:	697b      	ldr	r3, [r7, #20]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3718      	adds	r7, #24
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	2b00      	cmp	r3, #0
 8002990:	d018      	beq.n	80029c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68da      	ldr	r2, [r3, #12]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	441a      	add	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68da      	ldr	r2, [r3, #12]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d303      	bcc.n	80029b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68d9      	ldr	r1, [r3, #12]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	461a      	mov	r2, r3
 80029be:	6838      	ldr	r0, [r7, #0]
 80029c0:	f001 ff48 	bl	8004854 <memcpy>
	}
}
 80029c4:	bf00      	nop
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80029d4:	f001 fc2a 	bl	800422c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80029e0:	e011      	b.n	8002a06 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d012      	beq.n	8002a10 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	3324      	adds	r3, #36	; 0x24
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 fd1a 	bl	8003428 <xTaskRemoveFromEventList>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80029fa:	f000 fded 	bl	80035d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80029fe:	7bfb      	ldrb	r3, [r7, #15]
 8002a00:	3b01      	subs	r3, #1
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	dce9      	bgt.n	80029e2 <prvUnlockQueue+0x16>
 8002a0e:	e000      	b.n	8002a12 <prvUnlockQueue+0x46>
					break;
 8002a10:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	22ff      	movs	r2, #255	; 0xff
 8002a16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002a1a:	f001 fc35 	bl	8004288 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002a1e:	f001 fc05 	bl	800422c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a28:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a2a:	e011      	b.n	8002a50 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d012      	beq.n	8002a5a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3310      	adds	r3, #16
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f000 fcf5 	bl	8003428 <xTaskRemoveFromEventList>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002a44:	f000 fdc8 	bl	80035d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002a48:	7bbb      	ldrb	r3, [r7, #14]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	dce9      	bgt.n	8002a2c <prvUnlockQueue+0x60>
 8002a58:	e000      	b.n	8002a5c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002a5a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	22ff      	movs	r2, #255	; 0xff
 8002a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002a64:	f001 fc10 	bl	8004288 <vPortExitCritical>
}
 8002a68:	bf00      	nop
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a78:	f001 fbd8 	bl	800422c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d102      	bne.n	8002a8a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002a84:	2301      	movs	r3, #1
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	e001      	b.n	8002a8e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002a8e:	f001 fbfb 	bl	8004288 <vPortExitCritical>

	return xReturn;
 8002a92:	68fb      	ldr	r3, [r7, #12]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002aa4:	f001 fbc2 	bl	800422c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d102      	bne.n	8002aba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	e001      	b.n	8002abe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002aba:	2300      	movs	r3, #0
 8002abc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002abe:	f001 fbe3 	bl	8004288 <vPortExitCritical>

	return xReturn;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	e014      	b.n	8002b06 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002adc:	4a0e      	ldr	r2, [pc, #56]	; (8002b18 <vQueueAddToRegistry+0x4c>)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10b      	bne.n	8002b00 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002ae8:	490b      	ldr	r1, [pc, #44]	; (8002b18 <vQueueAddToRegistry+0x4c>)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002af2:	4a09      	ldr	r2, [pc, #36]	; (8002b18 <vQueueAddToRegistry+0x4c>)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	4413      	add	r3, r2
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002afe:	e005      	b.n	8002b0c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	3301      	adds	r3, #1
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2b07      	cmp	r3, #7
 8002b0a:	d9e7      	bls.n	8002adc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002b0c:	bf00      	nop
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	2000193c 	.word	0x2000193c

08002b1c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002b2c:	f001 fb7e 	bl	800422c <vPortEnterCritical>
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b36:	b25b      	sxtb	r3, r3
 8002b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3c:	d103      	bne.n	8002b46 <vQueueWaitForMessageRestricted+0x2a>
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b4c:	b25b      	sxtb	r3, r3
 8002b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b52:	d103      	bne.n	8002b5c <vQueueWaitForMessageRestricted+0x40>
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b5c:	f001 fb94 	bl	8004288 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d106      	bne.n	8002b76 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	3324      	adds	r3, #36	; 0x24
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	68b9      	ldr	r1, [r7, #8]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f000 fc2f 	bl	80033d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002b76:	6978      	ldr	r0, [r7, #20]
 8002b78:	f7ff ff28 	bl	80029cc <prvUnlockQueue>
	}
 8002b7c:	bf00      	nop
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08e      	sub	sp, #56	; 0x38
 8002b88:	af04      	add	r7, sp, #16
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
 8002b90:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d109      	bne.n	8002bac <xTaskCreateStatic+0x28>
 8002b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9c:	f383 8811 	msr	BASEPRI, r3
 8002ba0:	f3bf 8f6f 	isb	sy
 8002ba4:	f3bf 8f4f 	dsb	sy
 8002ba8:	623b      	str	r3, [r7, #32]
 8002baa:	e7fe      	b.n	8002baa <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d109      	bne.n	8002bc6 <xTaskCreateStatic+0x42>
 8002bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb6:	f383 8811 	msr	BASEPRI, r3
 8002bba:	f3bf 8f6f 	isb	sy
 8002bbe:	f3bf 8f4f 	dsb	sy
 8002bc2:	61fb      	str	r3, [r7, #28]
 8002bc4:	e7fe      	b.n	8002bc4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002bc6:	235c      	movs	r3, #92	; 0x5c
 8002bc8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	2b5c      	cmp	r3, #92	; 0x5c
 8002bce:	d009      	beq.n	8002be4 <xTaskCreateStatic+0x60>
 8002bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd4:	f383 8811 	msr	BASEPRI, r3
 8002bd8:	f3bf 8f6f 	isb	sy
 8002bdc:	f3bf 8f4f 	dsb	sy
 8002be0:	61bb      	str	r3, [r7, #24]
 8002be2:	e7fe      	b.n	8002be2 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002be4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d01e      	beq.n	8002c2a <xTaskCreateStatic+0xa6>
 8002bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d01b      	beq.n	8002c2a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bfa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	2202      	movs	r2, #2
 8002c00:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002c04:	2300      	movs	r3, #0
 8002c06:	9303      	str	r3, [sp, #12]
 8002c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0a:	9302      	str	r3, [sp, #8]
 8002c0c:	f107 0314 	add.w	r3, r7, #20
 8002c10:	9301      	str	r3, [sp, #4]
 8002c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	68b9      	ldr	r1, [r7, #8]
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f000 f850 	bl	8002cc2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c24:	f000 f8dc 	bl	8002de0 <prvAddNewTaskToReadyList>
 8002c28:	e001      	b.n	8002c2e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002c2e:	697b      	ldr	r3, [r7, #20]
	}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3728      	adds	r7, #40	; 0x28
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b08c      	sub	sp, #48	; 0x30
 8002c3c:	af04      	add	r7, sp, #16
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	603b      	str	r3, [r7, #0]
 8002c44:	4613      	mov	r3, r2
 8002c46:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002c48:	88fb      	ldrh	r3, [r7, #6]
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f001 fc07 	bl	8004460 <pvPortMalloc>
 8002c52:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00e      	beq.n	8002c78 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002c5a:	205c      	movs	r0, #92	; 0x5c
 8002c5c:	f001 fc00 	bl	8004460 <pvPortMalloc>
 8002c60:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d003      	beq.n	8002c70 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	631a      	str	r2, [r3, #48]	; 0x30
 8002c6e:	e005      	b.n	8002c7c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002c70:	6978      	ldr	r0, [r7, #20]
 8002c72:	f001 fcb7 	bl	80045e4 <vPortFree>
 8002c76:	e001      	b.n	8002c7c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d017      	beq.n	8002cb2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c8a:	88fa      	ldrh	r2, [r7, #6]
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	9303      	str	r3, [sp, #12]
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	9302      	str	r3, [sp, #8]
 8002c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c96:	9301      	str	r3, [sp, #4]
 8002c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	68b9      	ldr	r1, [r7, #8]
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f000 f80e 	bl	8002cc2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ca6:	69f8      	ldr	r0, [r7, #28]
 8002ca8:	f000 f89a 	bl	8002de0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002cac:	2301      	movs	r3, #1
 8002cae:	61bb      	str	r3, [r7, #24]
 8002cb0:	e002      	b.n	8002cb8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cb6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002cb8:	69bb      	ldr	r3, [r7, #24]
	}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3720      	adds	r7, #32
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b088      	sub	sp, #32
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	60f8      	str	r0, [r7, #12]
 8002cca:	60b9      	str	r1, [r7, #8]
 8002ccc:	607a      	str	r2, [r7, #4]
 8002cce:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	461a      	mov	r2, r3
 8002cda:	21a5      	movs	r1, #165	; 0xa5
 8002cdc:	f001 fdc5 	bl	800486a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002cea:	3b01      	subs	r3, #1
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	f023 0307 	bic.w	r3, r3, #7
 8002cf8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d009      	beq.n	8002d18 <prvInitialiseNewTask+0x56>
 8002d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d08:	f383 8811 	msr	BASEPRI, r3
 8002d0c:	f3bf 8f6f 	isb	sy
 8002d10:	f3bf 8f4f 	dsb	sy
 8002d14:	617b      	str	r3, [r7, #20]
 8002d16:	e7fe      	b.n	8002d16 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d01f      	beq.n	8002d5e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61fb      	str	r3, [r7, #28]
 8002d22:	e012      	b.n	8002d4a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d24:	68ba      	ldr	r2, [r7, #8]
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	4413      	add	r3, r2
 8002d2a:	7819      	ldrb	r1, [r3, #0]
 8002d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	4413      	add	r3, r2
 8002d32:	3334      	adds	r3, #52	; 0x34
 8002d34:	460a      	mov	r2, r1
 8002d36:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002d38:	68ba      	ldr	r2, [r7, #8]
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d006      	beq.n	8002d52 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	3301      	adds	r3, #1
 8002d48:	61fb      	str	r3, [r7, #28]
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	2b0f      	cmp	r3, #15
 8002d4e:	d9e9      	bls.n	8002d24 <prvInitialiseNewTask+0x62>
 8002d50:	e000      	b.n	8002d54 <prvInitialiseNewTask+0x92>
			{
				break;
 8002d52:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d5c:	e003      	b.n	8002d66 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d68:	2b37      	cmp	r3, #55	; 0x37
 8002d6a:	d901      	bls.n	8002d70 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d6c:	2337      	movs	r3, #55	; 0x37
 8002d6e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d74:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d7a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7e:	2200      	movs	r2, #0
 8002d80:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d84:	3304      	adds	r3, #4
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff f994 	bl	80020b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8e:	3318      	adds	r3, #24
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff f98f 	bl	80020b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d9a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002daa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dae:	2200      	movs	r2, #0
 8002db0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	68f9      	ldr	r1, [r7, #12]
 8002dbe:	69b8      	ldr	r0, [r7, #24]
 8002dc0:	f001 f90c 	bl	8003fdc <pxPortInitialiseStack>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d002      	beq.n	8002dd6 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002dd6:	bf00      	nop
 8002dd8:	3720      	adds	r7, #32
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
	...

08002de0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002de8:	f001 fa20 	bl	800422c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002dec:	4b2d      	ldr	r3, [pc, #180]	; (8002ea4 <prvAddNewTaskToReadyList+0xc4>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	3301      	adds	r3, #1
 8002df2:	4a2c      	ldr	r2, [pc, #176]	; (8002ea4 <prvAddNewTaskToReadyList+0xc4>)
 8002df4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002df6:	4b2c      	ldr	r3, [pc, #176]	; (8002ea8 <prvAddNewTaskToReadyList+0xc8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d109      	bne.n	8002e12 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002dfe:	4a2a      	ldr	r2, [pc, #168]	; (8002ea8 <prvAddNewTaskToReadyList+0xc8>)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e04:	4b27      	ldr	r3, [pc, #156]	; (8002ea4 <prvAddNewTaskToReadyList+0xc4>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d110      	bne.n	8002e2e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002e0c:	f000 fc08 	bl	8003620 <prvInitialiseTaskLists>
 8002e10:	e00d      	b.n	8002e2e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002e12:	4b26      	ldr	r3, [pc, #152]	; (8002eac <prvAddNewTaskToReadyList+0xcc>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d109      	bne.n	8002e2e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e1a:	4b23      	ldr	r3, [pc, #140]	; (8002ea8 <prvAddNewTaskToReadyList+0xc8>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d802      	bhi.n	8002e2e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002e28:	4a1f      	ldr	r2, [pc, #124]	; (8002ea8 <prvAddNewTaskToReadyList+0xc8>)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002e2e:	4b20      	ldr	r3, [pc, #128]	; (8002eb0 <prvAddNewTaskToReadyList+0xd0>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	3301      	adds	r3, #1
 8002e34:	4a1e      	ldr	r2, [pc, #120]	; (8002eb0 <prvAddNewTaskToReadyList+0xd0>)
 8002e36:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002e38:	4b1d      	ldr	r3, [pc, #116]	; (8002eb0 <prvAddNewTaskToReadyList+0xd0>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e44:	4b1b      	ldr	r3, [pc, #108]	; (8002eb4 <prvAddNewTaskToReadyList+0xd4>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d903      	bls.n	8002e54 <prvAddNewTaskToReadyList+0x74>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e50:	4a18      	ldr	r2, [pc, #96]	; (8002eb4 <prvAddNewTaskToReadyList+0xd4>)
 8002e52:	6013      	str	r3, [r2, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e58:	4613      	mov	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4a15      	ldr	r2, [pc, #84]	; (8002eb8 <prvAddNewTaskToReadyList+0xd8>)
 8002e62:	441a      	add	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3304      	adds	r3, #4
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4610      	mov	r0, r2
 8002e6c:	f7ff f92f 	bl	80020ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002e70:	f001 fa0a 	bl	8004288 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002e74:	4b0d      	ldr	r3, [pc, #52]	; (8002eac <prvAddNewTaskToReadyList+0xcc>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00e      	beq.n	8002e9a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002e7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ea8 <prvAddNewTaskToReadyList+0xc8>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d207      	bcs.n	8002e9a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002e8a:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <prvAddNewTaskToReadyList+0xdc>)
 8002e8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	f3bf 8f4f 	dsb	sy
 8002e96:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e9a:	bf00      	nop
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	20000bbc 	.word	0x20000bbc
 8002ea8:	200006e8 	.word	0x200006e8
 8002eac:	20000bc8 	.word	0x20000bc8
 8002eb0:	20000bd8 	.word	0x20000bd8
 8002eb4:	20000bc4 	.word	0x20000bc4
 8002eb8:	200006ec 	.word	0x200006ec
 8002ebc:	e000ed04 	.word	0xe000ed04

08002ec0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d016      	beq.n	8002f00 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002ed2:	4b13      	ldr	r3, [pc, #76]	; (8002f20 <vTaskDelay+0x60>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d009      	beq.n	8002eee <vTaskDelay+0x2e>
 8002eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ede:	f383 8811 	msr	BASEPRI, r3
 8002ee2:	f3bf 8f6f 	isb	sy
 8002ee6:	f3bf 8f4f 	dsb	sy
 8002eea:	60bb      	str	r3, [r7, #8]
 8002eec:	e7fe      	b.n	8002eec <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002eee:	f000 f87f 	bl	8002ff0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 fcd7 	bl	80038a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002efa:	f000 f887 	bl	800300c <xTaskResumeAll>
 8002efe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d107      	bne.n	8002f16 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002f06:	4b07      	ldr	r3, [pc, #28]	; (8002f24 <vTaskDelay+0x64>)
 8002f08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	f3bf 8f4f 	dsb	sy
 8002f12:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002f16:	bf00      	nop
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	20000be4 	.word	0x20000be4
 8002f24:	e000ed04 	.word	0xe000ed04

08002f28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b08a      	sub	sp, #40	; 0x28
 8002f2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002f32:	2300      	movs	r3, #0
 8002f34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002f36:	463a      	mov	r2, r7
 8002f38:	1d39      	adds	r1, r7, #4
 8002f3a:	f107 0308 	add.w	r3, r7, #8
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff f864 	bl	800200c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002f44:	6839      	ldr	r1, [r7, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	9202      	str	r2, [sp, #8]
 8002f4c:	9301      	str	r3, [sp, #4]
 8002f4e:	2300      	movs	r3, #0
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	2300      	movs	r3, #0
 8002f54:	460a      	mov	r2, r1
 8002f56:	4920      	ldr	r1, [pc, #128]	; (8002fd8 <vTaskStartScheduler+0xb0>)
 8002f58:	4820      	ldr	r0, [pc, #128]	; (8002fdc <vTaskStartScheduler+0xb4>)
 8002f5a:	f7ff fe13 	bl	8002b84 <xTaskCreateStatic>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	4b1f      	ldr	r3, [pc, #124]	; (8002fe0 <vTaskStartScheduler+0xb8>)
 8002f62:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002f64:	4b1e      	ldr	r3, [pc, #120]	; (8002fe0 <vTaskStartScheduler+0xb8>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d002      	beq.n	8002f72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	e001      	b.n	8002f76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d102      	bne.n	8002f82 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002f7c:	f000 fce8 	bl	8003950 <xTimerCreateTimerTask>
 8002f80:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d115      	bne.n	8002fb4 <vTaskStartScheduler+0x8c>
 8002f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8c:	f383 8811 	msr	BASEPRI, r3
 8002f90:	f3bf 8f6f 	isb	sy
 8002f94:	f3bf 8f4f 	dsb	sy
 8002f98:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002f9a:	4b12      	ldr	r3, [pc, #72]	; (8002fe4 <vTaskStartScheduler+0xbc>)
 8002f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002fa0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002fa2:	4b11      	ldr	r3, [pc, #68]	; (8002fe8 <vTaskStartScheduler+0xc0>)
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002fa8:	4b10      	ldr	r3, [pc, #64]	; (8002fec <vTaskStartScheduler+0xc4>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002fae:	f001 f89f 	bl	80040f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002fb2:	e00d      	b.n	8002fd0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fba:	d109      	bne.n	8002fd0 <vTaskStartScheduler+0xa8>
 8002fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc0:	f383 8811 	msr	BASEPRI, r3
 8002fc4:	f3bf 8f6f 	isb	sy
 8002fc8:	f3bf 8f4f 	dsb	sy
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	e7fe      	b.n	8002fce <vTaskStartScheduler+0xa6>
}
 8002fd0:	bf00      	nop
 8002fd2:	3718      	adds	r7, #24
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	080048c4 	.word	0x080048c4
 8002fdc:	080035f1 	.word	0x080035f1
 8002fe0:	20000be0 	.word	0x20000be0
 8002fe4:	20000bdc 	.word	0x20000bdc
 8002fe8:	20000bc8 	.word	0x20000bc8
 8002fec:	20000bc0 	.word	0x20000bc0

08002ff0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002ff4:	4b04      	ldr	r3, [pc, #16]	; (8003008 <vTaskSuspendAll+0x18>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	4a03      	ldr	r2, [pc, #12]	; (8003008 <vTaskSuspendAll+0x18>)
 8002ffc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8002ffe:	bf00      	nop
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	20000be4 	.word	0x20000be4

0800300c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003012:	2300      	movs	r3, #0
 8003014:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003016:	2300      	movs	r3, #0
 8003018:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800301a:	4b41      	ldr	r3, [pc, #260]	; (8003120 <xTaskResumeAll+0x114>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d109      	bne.n	8003036 <xTaskResumeAll+0x2a>
 8003022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003026:	f383 8811 	msr	BASEPRI, r3
 800302a:	f3bf 8f6f 	isb	sy
 800302e:	f3bf 8f4f 	dsb	sy
 8003032:	603b      	str	r3, [r7, #0]
 8003034:	e7fe      	b.n	8003034 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003036:	f001 f8f9 	bl	800422c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800303a:	4b39      	ldr	r3, [pc, #228]	; (8003120 <xTaskResumeAll+0x114>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	3b01      	subs	r3, #1
 8003040:	4a37      	ldr	r2, [pc, #220]	; (8003120 <xTaskResumeAll+0x114>)
 8003042:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003044:	4b36      	ldr	r3, [pc, #216]	; (8003120 <xTaskResumeAll+0x114>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d162      	bne.n	8003112 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800304c:	4b35      	ldr	r3, [pc, #212]	; (8003124 <xTaskResumeAll+0x118>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d05e      	beq.n	8003112 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003054:	e02f      	b.n	80030b6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003056:	4b34      	ldr	r3, [pc, #208]	; (8003128 <xTaskResumeAll+0x11c>)
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	3318      	adds	r3, #24
 8003062:	4618      	mov	r0, r3
 8003064:	f7ff f890 	bl	8002188 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	3304      	adds	r3, #4
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff f88b 	bl	8002188 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003076:	4b2d      	ldr	r3, [pc, #180]	; (800312c <xTaskResumeAll+0x120>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d903      	bls.n	8003086 <xTaskResumeAll+0x7a>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003082:	4a2a      	ldr	r2, [pc, #168]	; (800312c <xTaskResumeAll+0x120>)
 8003084:	6013      	str	r3, [r2, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800308a:	4613      	mov	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4a27      	ldr	r2, [pc, #156]	; (8003130 <xTaskResumeAll+0x124>)
 8003094:	441a      	add	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	3304      	adds	r3, #4
 800309a:	4619      	mov	r1, r3
 800309c:	4610      	mov	r0, r2
 800309e:	f7ff f816 	bl	80020ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a6:	4b23      	ldr	r3, [pc, #140]	; (8003134 <xTaskResumeAll+0x128>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d302      	bcc.n	80030b6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80030b0:	4b21      	ldr	r3, [pc, #132]	; (8003138 <xTaskResumeAll+0x12c>)
 80030b2:	2201      	movs	r2, #1
 80030b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030b6:	4b1c      	ldr	r3, [pc, #112]	; (8003128 <xTaskResumeAll+0x11c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1cb      	bne.n	8003056 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80030c4:	f000 fb46 	bl	8003754 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80030c8:	4b1c      	ldr	r3, [pc, #112]	; (800313c <xTaskResumeAll+0x130>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d010      	beq.n	80030f6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80030d4:	f000 f846 	bl	8003164 <xTaskIncrementTick>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80030de:	4b16      	ldr	r3, [pc, #88]	; (8003138 <xTaskResumeAll+0x12c>)
 80030e0:	2201      	movs	r2, #1
 80030e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1f1      	bne.n	80030d4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80030f0:	4b12      	ldr	r3, [pc, #72]	; (800313c <xTaskResumeAll+0x130>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80030f6:	4b10      	ldr	r3, [pc, #64]	; (8003138 <xTaskResumeAll+0x12c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d009      	beq.n	8003112 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80030fe:	2301      	movs	r3, #1
 8003100:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003102:	4b0f      	ldr	r3, [pc, #60]	; (8003140 <xTaskResumeAll+0x134>)
 8003104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003108:	601a      	str	r2, [r3, #0]
 800310a:	f3bf 8f4f 	dsb	sy
 800310e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003112:	f001 f8b9 	bl	8004288 <vPortExitCritical>

	return xAlreadyYielded;
 8003116:	68bb      	ldr	r3, [r7, #8]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	20000be4 	.word	0x20000be4
 8003124:	20000bbc 	.word	0x20000bbc
 8003128:	20000b7c 	.word	0x20000b7c
 800312c:	20000bc4 	.word	0x20000bc4
 8003130:	200006ec 	.word	0x200006ec
 8003134:	200006e8 	.word	0x200006e8
 8003138:	20000bd0 	.word	0x20000bd0
 800313c:	20000bcc 	.word	0x20000bcc
 8003140:	e000ed04 	.word	0xe000ed04

08003144 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800314a:	4b05      	ldr	r3, [pc, #20]	; (8003160 <xTaskGetTickCount+0x1c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003150:	687b      	ldr	r3, [r7, #4]
}
 8003152:	4618      	mov	r0, r3
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	20000bc0 	.word	0x20000bc0

08003164 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800316e:	4b4e      	ldr	r3, [pc, #312]	; (80032a8 <xTaskIncrementTick+0x144>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	f040 8088 	bne.w	8003288 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003178:	4b4c      	ldr	r3, [pc, #304]	; (80032ac <xTaskIncrementTick+0x148>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	3301      	adds	r3, #1
 800317e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003180:	4a4a      	ldr	r2, [pc, #296]	; (80032ac <xTaskIncrementTick+0x148>)
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d11f      	bne.n	80031cc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800318c:	4b48      	ldr	r3, [pc, #288]	; (80032b0 <xTaskIncrementTick+0x14c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d009      	beq.n	80031aa <xTaskIncrementTick+0x46>
 8003196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800319a:	f383 8811 	msr	BASEPRI, r3
 800319e:	f3bf 8f6f 	isb	sy
 80031a2:	f3bf 8f4f 	dsb	sy
 80031a6:	603b      	str	r3, [r7, #0]
 80031a8:	e7fe      	b.n	80031a8 <xTaskIncrementTick+0x44>
 80031aa:	4b41      	ldr	r3, [pc, #260]	; (80032b0 <xTaskIncrementTick+0x14c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	4b40      	ldr	r3, [pc, #256]	; (80032b4 <xTaskIncrementTick+0x150>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a3e      	ldr	r2, [pc, #248]	; (80032b0 <xTaskIncrementTick+0x14c>)
 80031b6:	6013      	str	r3, [r2, #0]
 80031b8:	4a3e      	ldr	r2, [pc, #248]	; (80032b4 <xTaskIncrementTick+0x150>)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6013      	str	r3, [r2, #0]
 80031be:	4b3e      	ldr	r3, [pc, #248]	; (80032b8 <xTaskIncrementTick+0x154>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	3301      	adds	r3, #1
 80031c4:	4a3c      	ldr	r2, [pc, #240]	; (80032b8 <xTaskIncrementTick+0x154>)
 80031c6:	6013      	str	r3, [r2, #0]
 80031c8:	f000 fac4 	bl	8003754 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80031cc:	4b3b      	ldr	r3, [pc, #236]	; (80032bc <xTaskIncrementTick+0x158>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d349      	bcc.n	800326a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031d6:	4b36      	ldr	r3, [pc, #216]	; (80032b0 <xTaskIncrementTick+0x14c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d104      	bne.n	80031ea <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031e0:	4b36      	ldr	r3, [pc, #216]	; (80032bc <xTaskIncrementTick+0x158>)
 80031e2:	f04f 32ff 	mov.w	r2, #4294967295
 80031e6:	601a      	str	r2, [r3, #0]
					break;
 80031e8:	e03f      	b.n	800326a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031ea:	4b31      	ldr	r3, [pc, #196]	; (80032b0 <xTaskIncrementTick+0x14c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d203      	bcs.n	800320a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003202:	4a2e      	ldr	r2, [pc, #184]	; (80032bc <xTaskIncrementTick+0x158>)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003208:	e02f      	b.n	800326a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	3304      	adds	r3, #4
 800320e:	4618      	mov	r0, r3
 8003210:	f7fe ffba 	bl	8002188 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003218:	2b00      	cmp	r3, #0
 800321a:	d004      	beq.n	8003226 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	3318      	adds	r3, #24
 8003220:	4618      	mov	r0, r3
 8003222:	f7fe ffb1 	bl	8002188 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800322a:	4b25      	ldr	r3, [pc, #148]	; (80032c0 <xTaskIncrementTick+0x15c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	429a      	cmp	r2, r3
 8003230:	d903      	bls.n	800323a <xTaskIncrementTick+0xd6>
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003236:	4a22      	ldr	r2, [pc, #136]	; (80032c0 <xTaskIncrementTick+0x15c>)
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800323e:	4613      	mov	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4a1f      	ldr	r2, [pc, #124]	; (80032c4 <xTaskIncrementTick+0x160>)
 8003248:	441a      	add	r2, r3
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	3304      	adds	r3, #4
 800324e:	4619      	mov	r1, r3
 8003250:	4610      	mov	r0, r2
 8003252:	f7fe ff3c 	bl	80020ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800325a:	4b1b      	ldr	r3, [pc, #108]	; (80032c8 <xTaskIncrementTick+0x164>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003260:	429a      	cmp	r2, r3
 8003262:	d3b8      	bcc.n	80031d6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003264:	2301      	movs	r3, #1
 8003266:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003268:	e7b5      	b.n	80031d6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800326a:	4b17      	ldr	r3, [pc, #92]	; (80032c8 <xTaskIncrementTick+0x164>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003270:	4914      	ldr	r1, [pc, #80]	; (80032c4 <xTaskIncrementTick+0x160>)
 8003272:	4613      	mov	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d907      	bls.n	8003292 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8003282:	2301      	movs	r3, #1
 8003284:	617b      	str	r3, [r7, #20]
 8003286:	e004      	b.n	8003292 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003288:	4b10      	ldr	r3, [pc, #64]	; (80032cc <xTaskIncrementTick+0x168>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	3301      	adds	r3, #1
 800328e:	4a0f      	ldr	r2, [pc, #60]	; (80032cc <xTaskIncrementTick+0x168>)
 8003290:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003292:	4b0f      	ldr	r3, [pc, #60]	; (80032d0 <xTaskIncrementTick+0x16c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800329a:	2301      	movs	r3, #1
 800329c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800329e:	697b      	ldr	r3, [r7, #20]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3718      	adds	r7, #24
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	20000be4 	.word	0x20000be4
 80032ac:	20000bc0 	.word	0x20000bc0
 80032b0:	20000b74 	.word	0x20000b74
 80032b4:	20000b78 	.word	0x20000b78
 80032b8:	20000bd4 	.word	0x20000bd4
 80032bc:	20000bdc 	.word	0x20000bdc
 80032c0:	20000bc4 	.word	0x20000bc4
 80032c4:	200006ec 	.word	0x200006ec
 80032c8:	200006e8 	.word	0x200006e8
 80032cc:	20000bcc 	.word	0x20000bcc
 80032d0:	20000bd0 	.word	0x20000bd0

080032d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032da:	4b27      	ldr	r3, [pc, #156]	; (8003378 <vTaskSwitchContext+0xa4>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80032e2:	4b26      	ldr	r3, [pc, #152]	; (800337c <vTaskSwitchContext+0xa8>)
 80032e4:	2201      	movs	r2, #1
 80032e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80032e8:	e040      	b.n	800336c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80032ea:	4b24      	ldr	r3, [pc, #144]	; (800337c <vTaskSwitchContext+0xa8>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032f0:	4b23      	ldr	r3, [pc, #140]	; (8003380 <vTaskSwitchContext+0xac>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	60fb      	str	r3, [r7, #12]
 80032f6:	e00f      	b.n	8003318 <vTaskSwitchContext+0x44>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d109      	bne.n	8003312 <vTaskSwitchContext+0x3e>
 80032fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003302:	f383 8811 	msr	BASEPRI, r3
 8003306:	f3bf 8f6f 	isb	sy
 800330a:	f3bf 8f4f 	dsb	sy
 800330e:	607b      	str	r3, [r7, #4]
 8003310:	e7fe      	b.n	8003310 <vTaskSwitchContext+0x3c>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	3b01      	subs	r3, #1
 8003316:	60fb      	str	r3, [r7, #12]
 8003318:	491a      	ldr	r1, [pc, #104]	; (8003384 <vTaskSwitchContext+0xb0>)
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	4613      	mov	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	440b      	add	r3, r1
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0e5      	beq.n	80032f8 <vTaskSwitchContext+0x24>
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	4613      	mov	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4413      	add	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4a13      	ldr	r2, [pc, #76]	; (8003384 <vTaskSwitchContext+0xb0>)
 8003338:	4413      	add	r3, r2
 800333a:	60bb      	str	r3, [r7, #8]
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	605a      	str	r2, [r3, #4]
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	3308      	adds	r3, #8
 800334e:	429a      	cmp	r2, r3
 8003350:	d104      	bne.n	800335c <vTaskSwitchContext+0x88>
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	605a      	str	r2, [r3, #4]
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	4a09      	ldr	r2, [pc, #36]	; (8003388 <vTaskSwitchContext+0xb4>)
 8003364:	6013      	str	r3, [r2, #0]
 8003366:	4a06      	ldr	r2, [pc, #24]	; (8003380 <vTaskSwitchContext+0xac>)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6013      	str	r3, [r2, #0]
}
 800336c:	bf00      	nop
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	20000be4 	.word	0x20000be4
 800337c:	20000bd0 	.word	0x20000bd0
 8003380:	20000bc4 	.word	0x20000bc4
 8003384:	200006ec 	.word	0x200006ec
 8003388:	200006e8 	.word	0x200006e8

0800338c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d109      	bne.n	80033b0 <vTaskPlaceOnEventList+0x24>
 800339c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a0:	f383 8811 	msr	BASEPRI, r3
 80033a4:	f3bf 8f6f 	isb	sy
 80033a8:	f3bf 8f4f 	dsb	sy
 80033ac:	60fb      	str	r3, [r7, #12]
 80033ae:	e7fe      	b.n	80033ae <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033b0:	4b07      	ldr	r3, [pc, #28]	; (80033d0 <vTaskPlaceOnEventList+0x44>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	3318      	adds	r3, #24
 80033b6:	4619      	mov	r1, r3
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f7fe feac 	bl	8002116 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80033be:	2101      	movs	r1, #1
 80033c0:	6838      	ldr	r0, [r7, #0]
 80033c2:	f000 fa71 	bl	80038a8 <prvAddCurrentTaskToDelayedList>
}
 80033c6:	bf00      	nop
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	200006e8 	.word	0x200006e8

080033d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d109      	bne.n	80033fa <vTaskPlaceOnEventListRestricted+0x26>
 80033e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ea:	f383 8811 	msr	BASEPRI, r3
 80033ee:	f3bf 8f6f 	isb	sy
 80033f2:	f3bf 8f4f 	dsb	sy
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	e7fe      	b.n	80033f8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033fa:	4b0a      	ldr	r3, [pc, #40]	; (8003424 <vTaskPlaceOnEventListRestricted+0x50>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	3318      	adds	r3, #24
 8003400:	4619      	mov	r1, r3
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f7fe fe63 	bl	80020ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d002      	beq.n	8003414 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800340e:	f04f 33ff 	mov.w	r3, #4294967295
 8003412:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	68b8      	ldr	r0, [r7, #8]
 8003418:	f000 fa46 	bl	80038a8 <prvAddCurrentTaskToDelayedList>
	}
 800341c:	bf00      	nop
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	200006e8 	.word	0x200006e8

08003428 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d109      	bne.n	8003452 <xTaskRemoveFromEventList+0x2a>
 800343e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003442:	f383 8811 	msr	BASEPRI, r3
 8003446:	f3bf 8f6f 	isb	sy
 800344a:	f3bf 8f4f 	dsb	sy
 800344e:	60fb      	str	r3, [r7, #12]
 8003450:	e7fe      	b.n	8003450 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	3318      	adds	r3, #24
 8003456:	4618      	mov	r0, r3
 8003458:	f7fe fe96 	bl	8002188 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800345c:	4b1d      	ldr	r3, [pc, #116]	; (80034d4 <xTaskRemoveFromEventList+0xac>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d11d      	bne.n	80034a0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	3304      	adds	r3, #4
 8003468:	4618      	mov	r0, r3
 800346a:	f7fe fe8d 	bl	8002188 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003472:	4b19      	ldr	r3, [pc, #100]	; (80034d8 <xTaskRemoveFromEventList+0xb0>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	429a      	cmp	r2, r3
 8003478:	d903      	bls.n	8003482 <xTaskRemoveFromEventList+0x5a>
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347e:	4a16      	ldr	r2, [pc, #88]	; (80034d8 <xTaskRemoveFromEventList+0xb0>)
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003486:	4613      	mov	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4a13      	ldr	r2, [pc, #76]	; (80034dc <xTaskRemoveFromEventList+0xb4>)
 8003490:	441a      	add	r2, r3
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	3304      	adds	r3, #4
 8003496:	4619      	mov	r1, r3
 8003498:	4610      	mov	r0, r2
 800349a:	f7fe fe18 	bl	80020ce <vListInsertEnd>
 800349e:	e005      	b.n	80034ac <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	3318      	adds	r3, #24
 80034a4:	4619      	mov	r1, r3
 80034a6:	480e      	ldr	r0, [pc, #56]	; (80034e0 <xTaskRemoveFromEventList+0xb8>)
 80034a8:	f7fe fe11 	bl	80020ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b0:	4b0c      	ldr	r3, [pc, #48]	; (80034e4 <xTaskRemoveFromEventList+0xbc>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d905      	bls.n	80034c6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80034ba:	2301      	movs	r3, #1
 80034bc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80034be:	4b0a      	ldr	r3, [pc, #40]	; (80034e8 <xTaskRemoveFromEventList+0xc0>)
 80034c0:	2201      	movs	r2, #1
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	e001      	b.n	80034ca <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80034ca:	697b      	ldr	r3, [r7, #20]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3718      	adds	r7, #24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	20000be4 	.word	0x20000be4
 80034d8:	20000bc4 	.word	0x20000bc4
 80034dc:	200006ec 	.word	0x200006ec
 80034e0:	20000b7c 	.word	0x20000b7c
 80034e4:	200006e8 	.word	0x200006e8
 80034e8:	20000bd0 	.word	0x20000bd0

080034ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80034f4:	4b06      	ldr	r3, [pc, #24]	; (8003510 <vTaskInternalSetTimeOutState+0x24>)
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80034fc:	4b05      	ldr	r3, [pc, #20]	; (8003514 <vTaskInternalSetTimeOutState+0x28>)
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	605a      	str	r2, [r3, #4]
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	20000bd4 	.word	0x20000bd4
 8003514:	20000bc0 	.word	0x20000bc0

08003518 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b088      	sub	sp, #32
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d109      	bne.n	800353c <xTaskCheckForTimeOut+0x24>
 8003528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800352c:	f383 8811 	msr	BASEPRI, r3
 8003530:	f3bf 8f6f 	isb	sy
 8003534:	f3bf 8f4f 	dsb	sy
 8003538:	613b      	str	r3, [r7, #16]
 800353a:	e7fe      	b.n	800353a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d109      	bne.n	8003556 <xTaskCheckForTimeOut+0x3e>
 8003542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003546:	f383 8811 	msr	BASEPRI, r3
 800354a:	f3bf 8f6f 	isb	sy
 800354e:	f3bf 8f4f 	dsb	sy
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	e7fe      	b.n	8003554 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003556:	f000 fe69 	bl	800422c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800355a:	4b1d      	ldr	r3, [pc, #116]	; (80035d0 <xTaskCheckForTimeOut+0xb8>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003572:	d102      	bne.n	800357a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003574:	2300      	movs	r3, #0
 8003576:	61fb      	str	r3, [r7, #28]
 8003578:	e023      	b.n	80035c2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	4b15      	ldr	r3, [pc, #84]	; (80035d4 <xTaskCheckForTimeOut+0xbc>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	429a      	cmp	r2, r3
 8003584:	d007      	beq.n	8003596 <xTaskCheckForTimeOut+0x7e>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	429a      	cmp	r2, r3
 800358e:	d302      	bcc.n	8003596 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003590:	2301      	movs	r3, #1
 8003592:	61fb      	str	r3, [r7, #28]
 8003594:	e015      	b.n	80035c2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	697a      	ldr	r2, [r7, #20]
 800359c:	429a      	cmp	r2, r3
 800359e:	d20b      	bcs.n	80035b8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	1ad2      	subs	r2, r2, r3
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f7ff ff9d 	bl	80034ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80035b2:	2300      	movs	r3, #0
 80035b4:	61fb      	str	r3, [r7, #28]
 80035b6:	e004      	b.n	80035c2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	2200      	movs	r2, #0
 80035bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80035be:	2301      	movs	r3, #1
 80035c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80035c2:	f000 fe61 	bl	8004288 <vPortExitCritical>

	return xReturn;
 80035c6:	69fb      	ldr	r3, [r7, #28]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3720      	adds	r7, #32
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	20000bc0 	.word	0x20000bc0
 80035d4:	20000bd4 	.word	0x20000bd4

080035d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80035dc:	4b03      	ldr	r3, [pc, #12]	; (80035ec <vTaskMissedYield+0x14>)
 80035de:	2201      	movs	r2, #1
 80035e0:	601a      	str	r2, [r3, #0]
}
 80035e2:	bf00      	nop
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	20000bd0 	.word	0x20000bd0

080035f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80035f8:	f000 f852 	bl	80036a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80035fc:	4b06      	ldr	r3, [pc, #24]	; (8003618 <prvIdleTask+0x28>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d9f9      	bls.n	80035f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003604:	4b05      	ldr	r3, [pc, #20]	; (800361c <prvIdleTask+0x2c>)
 8003606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	f3bf 8f4f 	dsb	sy
 8003610:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003614:	e7f0      	b.n	80035f8 <prvIdleTask+0x8>
 8003616:	bf00      	nop
 8003618:	200006ec 	.word	0x200006ec
 800361c:	e000ed04 	.word	0xe000ed04

08003620 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003626:	2300      	movs	r3, #0
 8003628:	607b      	str	r3, [r7, #4]
 800362a:	e00c      	b.n	8003646 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	4613      	mov	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4a12      	ldr	r2, [pc, #72]	; (8003680 <prvInitialiseTaskLists+0x60>)
 8003638:	4413      	add	r3, r2
 800363a:	4618      	mov	r0, r3
 800363c:	f7fe fd1a 	bl	8002074 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3301      	adds	r3, #1
 8003644:	607b      	str	r3, [r7, #4]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2b37      	cmp	r3, #55	; 0x37
 800364a:	d9ef      	bls.n	800362c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800364c:	480d      	ldr	r0, [pc, #52]	; (8003684 <prvInitialiseTaskLists+0x64>)
 800364e:	f7fe fd11 	bl	8002074 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003652:	480d      	ldr	r0, [pc, #52]	; (8003688 <prvInitialiseTaskLists+0x68>)
 8003654:	f7fe fd0e 	bl	8002074 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003658:	480c      	ldr	r0, [pc, #48]	; (800368c <prvInitialiseTaskLists+0x6c>)
 800365a:	f7fe fd0b 	bl	8002074 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800365e:	480c      	ldr	r0, [pc, #48]	; (8003690 <prvInitialiseTaskLists+0x70>)
 8003660:	f7fe fd08 	bl	8002074 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003664:	480b      	ldr	r0, [pc, #44]	; (8003694 <prvInitialiseTaskLists+0x74>)
 8003666:	f7fe fd05 	bl	8002074 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800366a:	4b0b      	ldr	r3, [pc, #44]	; (8003698 <prvInitialiseTaskLists+0x78>)
 800366c:	4a05      	ldr	r2, [pc, #20]	; (8003684 <prvInitialiseTaskLists+0x64>)
 800366e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003670:	4b0a      	ldr	r3, [pc, #40]	; (800369c <prvInitialiseTaskLists+0x7c>)
 8003672:	4a05      	ldr	r2, [pc, #20]	; (8003688 <prvInitialiseTaskLists+0x68>)
 8003674:	601a      	str	r2, [r3, #0]
}
 8003676:	bf00      	nop
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	200006ec 	.word	0x200006ec
 8003684:	20000b4c 	.word	0x20000b4c
 8003688:	20000b60 	.word	0x20000b60
 800368c:	20000b7c 	.word	0x20000b7c
 8003690:	20000b90 	.word	0x20000b90
 8003694:	20000ba8 	.word	0x20000ba8
 8003698:	20000b74 	.word	0x20000b74
 800369c:	20000b78 	.word	0x20000b78

080036a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036a6:	e019      	b.n	80036dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80036a8:	f000 fdc0 	bl	800422c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036ac:	4b0f      	ldr	r3, [pc, #60]	; (80036ec <prvCheckTasksWaitingTermination+0x4c>)
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3304      	adds	r3, #4
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7fe fd65 	bl	8002188 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80036be:	4b0c      	ldr	r3, [pc, #48]	; (80036f0 <prvCheckTasksWaitingTermination+0x50>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	4a0a      	ldr	r2, [pc, #40]	; (80036f0 <prvCheckTasksWaitingTermination+0x50>)
 80036c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80036c8:	4b0a      	ldr	r3, [pc, #40]	; (80036f4 <prvCheckTasksWaitingTermination+0x54>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	3b01      	subs	r3, #1
 80036ce:	4a09      	ldr	r2, [pc, #36]	; (80036f4 <prvCheckTasksWaitingTermination+0x54>)
 80036d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80036d2:	f000 fdd9 	bl	8004288 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f80e 	bl	80036f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036dc:	4b05      	ldr	r3, [pc, #20]	; (80036f4 <prvCheckTasksWaitingTermination+0x54>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1e1      	bne.n	80036a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80036e4:	bf00      	nop
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	20000b90 	.word	0x20000b90
 80036f0:	20000bbc 	.word	0x20000bbc
 80036f4:	20000ba4 	.word	0x20000ba4

080036f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003706:	2b00      	cmp	r3, #0
 8003708:	d108      	bne.n	800371c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370e:	4618      	mov	r0, r3
 8003710:	f000 ff68 	bl	80045e4 <vPortFree>
				vPortFree( pxTCB );
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 ff65 	bl	80045e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800371a:	e017      	b.n	800374c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003722:	2b01      	cmp	r3, #1
 8003724:	d103      	bne.n	800372e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 ff5c 	bl	80045e4 <vPortFree>
	}
 800372c:	e00e      	b.n	800374c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003734:	2b02      	cmp	r3, #2
 8003736:	d009      	beq.n	800374c <prvDeleteTCB+0x54>
 8003738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373c:	f383 8811 	msr	BASEPRI, r3
 8003740:	f3bf 8f6f 	isb	sy
 8003744:	f3bf 8f4f 	dsb	sy
 8003748:	60fb      	str	r3, [r7, #12]
 800374a:	e7fe      	b.n	800374a <prvDeleteTCB+0x52>
	}
 800374c:	bf00      	nop
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800375a:	4b0c      	ldr	r3, [pc, #48]	; (800378c <prvResetNextTaskUnblockTime+0x38>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d104      	bne.n	800376e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003764:	4b0a      	ldr	r3, [pc, #40]	; (8003790 <prvResetNextTaskUnblockTime+0x3c>)
 8003766:	f04f 32ff 	mov.w	r2, #4294967295
 800376a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800376c:	e008      	b.n	8003780 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800376e:	4b07      	ldr	r3, [pc, #28]	; (800378c <prvResetNextTaskUnblockTime+0x38>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	4a04      	ldr	r2, [pc, #16]	; (8003790 <prvResetNextTaskUnblockTime+0x3c>)
 800377e:	6013      	str	r3, [r2, #0]
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	20000b74 	.word	0x20000b74
 8003790:	20000bdc 	.word	0x20000bdc

08003794 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800379a:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <xTaskGetSchedulerState+0x34>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d102      	bne.n	80037a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80037a2:	2301      	movs	r3, #1
 80037a4:	607b      	str	r3, [r7, #4]
 80037a6:	e008      	b.n	80037ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037a8:	4b08      	ldr	r3, [pc, #32]	; (80037cc <xTaskGetSchedulerState+0x38>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d102      	bne.n	80037b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80037b0:	2302      	movs	r3, #2
 80037b2:	607b      	str	r3, [r7, #4]
 80037b4:	e001      	b.n	80037ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80037b6:	2300      	movs	r3, #0
 80037b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80037ba:	687b      	ldr	r3, [r7, #4]
	}
 80037bc:	4618      	mov	r0, r3
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr
 80037c8:	20000bc8 	.word	0x20000bc8
 80037cc:	20000be4 	.word	0x20000be4

080037d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80037dc:	2300      	movs	r3, #0
 80037de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d054      	beq.n	8003890 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80037e6:	4b2d      	ldr	r3, [pc, #180]	; (800389c <xTaskPriorityDisinherit+0xcc>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d009      	beq.n	8003804 <xTaskPriorityDisinherit+0x34>
 80037f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f4:	f383 8811 	msr	BASEPRI, r3
 80037f8:	f3bf 8f6f 	isb	sy
 80037fc:	f3bf 8f4f 	dsb	sy
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	e7fe      	b.n	8003802 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003808:	2b00      	cmp	r3, #0
 800380a:	d109      	bne.n	8003820 <xTaskPriorityDisinherit+0x50>
 800380c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003810:	f383 8811 	msr	BASEPRI, r3
 8003814:	f3bf 8f6f 	isb	sy
 8003818:	f3bf 8f4f 	dsb	sy
 800381c:	60bb      	str	r3, [r7, #8]
 800381e:	e7fe      	b.n	800381e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003824:	1e5a      	subs	r2, r3, #1
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003832:	429a      	cmp	r2, r3
 8003834:	d02c      	beq.n	8003890 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800383a:	2b00      	cmp	r3, #0
 800383c:	d128      	bne.n	8003890 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	3304      	adds	r3, #4
 8003842:	4618      	mov	r0, r3
 8003844:	f7fe fca0 	bl	8002188 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003860:	4b0f      	ldr	r3, [pc, #60]	; (80038a0 <xTaskPriorityDisinherit+0xd0>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	429a      	cmp	r2, r3
 8003866:	d903      	bls.n	8003870 <xTaskPriorityDisinherit+0xa0>
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386c:	4a0c      	ldr	r2, [pc, #48]	; (80038a0 <xTaskPriorityDisinherit+0xd0>)
 800386e:	6013      	str	r3, [r2, #0]
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003874:	4613      	mov	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4a09      	ldr	r2, [pc, #36]	; (80038a4 <xTaskPriorityDisinherit+0xd4>)
 800387e:	441a      	add	r2, r3
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	3304      	adds	r3, #4
 8003884:	4619      	mov	r1, r3
 8003886:	4610      	mov	r0, r2
 8003888:	f7fe fc21 	bl	80020ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800388c:	2301      	movs	r3, #1
 800388e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003890:	697b      	ldr	r3, [r7, #20]
	}
 8003892:	4618      	mov	r0, r3
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	200006e8 	.word	0x200006e8
 80038a0:	20000bc4 	.word	0x20000bc4
 80038a4:	200006ec 	.word	0x200006ec

080038a8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80038b2:	4b21      	ldr	r3, [pc, #132]	; (8003938 <prvAddCurrentTaskToDelayedList+0x90>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038b8:	4b20      	ldr	r3, [pc, #128]	; (800393c <prvAddCurrentTaskToDelayedList+0x94>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	3304      	adds	r3, #4
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fe fc62 	bl	8002188 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ca:	d10a      	bne.n	80038e2 <prvAddCurrentTaskToDelayedList+0x3a>
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d007      	beq.n	80038e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038d2:	4b1a      	ldr	r3, [pc, #104]	; (800393c <prvAddCurrentTaskToDelayedList+0x94>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	3304      	adds	r3, #4
 80038d8:	4619      	mov	r1, r3
 80038da:	4819      	ldr	r0, [pc, #100]	; (8003940 <prvAddCurrentTaskToDelayedList+0x98>)
 80038dc:	f7fe fbf7 	bl	80020ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80038e0:	e026      	b.n	8003930 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4413      	add	r3, r2
 80038e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80038ea:	4b14      	ldr	r3, [pc, #80]	; (800393c <prvAddCurrentTaskToDelayedList+0x94>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d209      	bcs.n	800390e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038fa:	4b12      	ldr	r3, [pc, #72]	; (8003944 <prvAddCurrentTaskToDelayedList+0x9c>)
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	4b0f      	ldr	r3, [pc, #60]	; (800393c <prvAddCurrentTaskToDelayedList+0x94>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	3304      	adds	r3, #4
 8003904:	4619      	mov	r1, r3
 8003906:	4610      	mov	r0, r2
 8003908:	f7fe fc05 	bl	8002116 <vListInsert>
}
 800390c:	e010      	b.n	8003930 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800390e:	4b0e      	ldr	r3, [pc, #56]	; (8003948 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	4b0a      	ldr	r3, [pc, #40]	; (800393c <prvAddCurrentTaskToDelayedList+0x94>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	3304      	adds	r3, #4
 8003918:	4619      	mov	r1, r3
 800391a:	4610      	mov	r0, r2
 800391c:	f7fe fbfb 	bl	8002116 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003920:	4b0a      	ldr	r3, [pc, #40]	; (800394c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	429a      	cmp	r2, r3
 8003928:	d202      	bcs.n	8003930 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800392a:	4a08      	ldr	r2, [pc, #32]	; (800394c <prvAddCurrentTaskToDelayedList+0xa4>)
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	6013      	str	r3, [r2, #0]
}
 8003930:	bf00      	nop
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	20000bc0 	.word	0x20000bc0
 800393c:	200006e8 	.word	0x200006e8
 8003940:	20000ba8 	.word	0x20000ba8
 8003944:	20000b78 	.word	0x20000b78
 8003948:	20000b74 	.word	0x20000b74
 800394c:	20000bdc 	.word	0x20000bdc

08003950 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b08a      	sub	sp, #40	; 0x28
 8003954:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003956:	2300      	movs	r3, #0
 8003958:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800395a:	f000 faff 	bl	8003f5c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800395e:	4b1c      	ldr	r3, [pc, #112]	; (80039d0 <xTimerCreateTimerTask+0x80>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d021      	beq.n	80039aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003966:	2300      	movs	r3, #0
 8003968:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800396a:	2300      	movs	r3, #0
 800396c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800396e:	1d3a      	adds	r2, r7, #4
 8003970:	f107 0108 	add.w	r1, r7, #8
 8003974:	f107 030c 	add.w	r3, r7, #12
 8003978:	4618      	mov	r0, r3
 800397a:	f7fe fb61 	bl	8002040 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	9202      	str	r2, [sp, #8]
 8003986:	9301      	str	r3, [sp, #4]
 8003988:	2302      	movs	r3, #2
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	2300      	movs	r3, #0
 800398e:	460a      	mov	r2, r1
 8003990:	4910      	ldr	r1, [pc, #64]	; (80039d4 <xTimerCreateTimerTask+0x84>)
 8003992:	4811      	ldr	r0, [pc, #68]	; (80039d8 <xTimerCreateTimerTask+0x88>)
 8003994:	f7ff f8f6 	bl	8002b84 <xTaskCreateStatic>
 8003998:	4602      	mov	r2, r0
 800399a:	4b10      	ldr	r3, [pc, #64]	; (80039dc <xTimerCreateTimerTask+0x8c>)
 800399c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800399e:	4b0f      	ldr	r3, [pc, #60]	; (80039dc <xTimerCreateTimerTask+0x8c>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80039a6:	2301      	movs	r3, #1
 80039a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d109      	bne.n	80039c4 <xTimerCreateTimerTask+0x74>
 80039b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b4:	f383 8811 	msr	BASEPRI, r3
 80039b8:	f3bf 8f6f 	isb	sy
 80039bc:	f3bf 8f4f 	dsb	sy
 80039c0:	613b      	str	r3, [r7, #16]
 80039c2:	e7fe      	b.n	80039c2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80039c4:	697b      	ldr	r3, [r7, #20]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3718      	adds	r7, #24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	20000c18 	.word	0x20000c18
 80039d4:	080048cc 	.word	0x080048cc
 80039d8:	08003b11 	.word	0x08003b11
 80039dc:	20000c1c 	.word	0x20000c1c

080039e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b08a      	sub	sp, #40	; 0x28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
 80039ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80039ee:	2300      	movs	r3, #0
 80039f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d109      	bne.n	8003a0c <xTimerGenericCommand+0x2c>
 80039f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fc:	f383 8811 	msr	BASEPRI, r3
 8003a00:	f3bf 8f6f 	isb	sy
 8003a04:	f3bf 8f4f 	dsb	sy
 8003a08:	623b      	str	r3, [r7, #32]
 8003a0a:	e7fe      	b.n	8003a0a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003a0c:	4b19      	ldr	r3, [pc, #100]	; (8003a74 <xTimerGenericCommand+0x94>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d02a      	beq.n	8003a6a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	2b05      	cmp	r3, #5
 8003a24:	dc18      	bgt.n	8003a58 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003a26:	f7ff feb5 	bl	8003794 <xTaskGetSchedulerState>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d109      	bne.n	8003a44 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003a30:	4b10      	ldr	r3, [pc, #64]	; (8003a74 <xTimerGenericCommand+0x94>)
 8003a32:	6818      	ldr	r0, [r3, #0]
 8003a34:	f107 0110 	add.w	r1, r7, #16
 8003a38:	2300      	movs	r3, #0
 8003a3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a3c:	f7fe fccc 	bl	80023d8 <xQueueGenericSend>
 8003a40:	6278      	str	r0, [r7, #36]	; 0x24
 8003a42:	e012      	b.n	8003a6a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003a44:	4b0b      	ldr	r3, [pc, #44]	; (8003a74 <xTimerGenericCommand+0x94>)
 8003a46:	6818      	ldr	r0, [r3, #0]
 8003a48:	f107 0110 	add.w	r1, r7, #16
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f7fe fcc2 	bl	80023d8 <xQueueGenericSend>
 8003a54:	6278      	str	r0, [r7, #36]	; 0x24
 8003a56:	e008      	b.n	8003a6a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003a58:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <xTimerGenericCommand+0x94>)
 8003a5a:	6818      	ldr	r0, [r3, #0]
 8003a5c:	f107 0110 	add.w	r1, r7, #16
 8003a60:	2300      	movs	r3, #0
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	f7fe fdb2 	bl	80025cc <xQueueGenericSendFromISR>
 8003a68:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3728      	adds	r7, #40	; 0x28
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	20000c18 	.word	0x20000c18

08003a78 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b088      	sub	sp, #32
 8003a7c:	af02      	add	r7, sp, #8
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a82:	4b22      	ldr	r3, [pc, #136]	; (8003b0c <prvProcessExpiredTimer+0x94>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	3304      	adds	r3, #4
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7fe fb79 	bl	8002188 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d021      	beq.n	8003ae8 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	699a      	ldr	r2, [r3, #24]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	18d1      	adds	r1, r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	6978      	ldr	r0, [r7, #20]
 8003ab2:	f000 f8d1 	bl	8003c58 <prvInsertTimerInActiveList>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d01e      	beq.n	8003afa <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003abc:	2300      	movs	r3, #0
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	6978      	ldr	r0, [r7, #20]
 8003ac8:	f7ff ff8a 	bl	80039e0 <xTimerGenericCommand>
 8003acc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d112      	bne.n	8003afa <prvProcessExpiredTimer+0x82>
 8003ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad8:	f383 8811 	msr	BASEPRI, r3
 8003adc:	f3bf 8f6f 	isb	sy
 8003ae0:	f3bf 8f4f 	dsb	sy
 8003ae4:	60fb      	str	r3, [r7, #12]
 8003ae6:	e7fe      	b.n	8003ae6 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003aee:	f023 0301 	bic.w	r3, r3, #1
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	6978      	ldr	r0, [r7, #20]
 8003b00:	4798      	blx	r3
}
 8003b02:	bf00      	nop
 8003b04:	3718      	adds	r7, #24
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	20000c10 	.word	0x20000c10

08003b10 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b18:	f107 0308 	add.w	r3, r7, #8
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 f857 	bl	8003bd0 <prvGetNextExpireTime>
 8003b22:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	4619      	mov	r1, r3
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 f803 	bl	8003b34 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003b2e:	f000 f8d5 	bl	8003cdc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b32:	e7f1      	b.n	8003b18 <prvTimerTask+0x8>

08003b34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003b3e:	f7ff fa57 	bl	8002ff0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b42:	f107 0308 	add.w	r3, r7, #8
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 f866 	bl	8003c18 <prvSampleTimeNow>
 8003b4c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d130      	bne.n	8003bb6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10a      	bne.n	8003b70 <prvProcessTimerOrBlockTask+0x3c>
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d806      	bhi.n	8003b70 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003b62:	f7ff fa53 	bl	800300c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003b66:	68f9      	ldr	r1, [r7, #12]
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f7ff ff85 	bl	8003a78 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003b6e:	e024      	b.n	8003bba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d008      	beq.n	8003b88 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003b76:	4b13      	ldr	r3, [pc, #76]	; (8003bc4 <prvProcessTimerOrBlockTask+0x90>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <prvProcessTimerOrBlockTask+0x50>
 8003b80:	2301      	movs	r3, #1
 8003b82:	e000      	b.n	8003b86 <prvProcessTimerOrBlockTask+0x52>
 8003b84:	2300      	movs	r3, #0
 8003b86:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003b88:	4b0f      	ldr	r3, [pc, #60]	; (8003bc8 <prvProcessTimerOrBlockTask+0x94>)
 8003b8a:	6818      	ldr	r0, [r3, #0]
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	4619      	mov	r1, r3
 8003b96:	f7fe ffc1 	bl	8002b1c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003b9a:	f7ff fa37 	bl	800300c <xTaskResumeAll>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10a      	bne.n	8003bba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003ba4:	4b09      	ldr	r3, [pc, #36]	; (8003bcc <prvProcessTimerOrBlockTask+0x98>)
 8003ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	f3bf 8f4f 	dsb	sy
 8003bb0:	f3bf 8f6f 	isb	sy
}
 8003bb4:	e001      	b.n	8003bba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003bb6:	f7ff fa29 	bl	800300c <xTaskResumeAll>
}
 8003bba:	bf00      	nop
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	20000c14 	.word	0x20000c14
 8003bc8:	20000c18 	.word	0x20000c18
 8003bcc:	e000ed04 	.word	0xe000ed04

08003bd0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003bd8:	4b0e      	ldr	r3, [pc, #56]	; (8003c14 <prvGetNextExpireTime+0x44>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <prvGetNextExpireTime+0x16>
 8003be2:	2201      	movs	r2, #1
 8003be4:	e000      	b.n	8003be8 <prvGetNextExpireTime+0x18>
 8003be6:	2200      	movs	r2, #0
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d105      	bne.n	8003c00 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003bf4:	4b07      	ldr	r3, [pc, #28]	; (8003c14 <prvGetNextExpireTime+0x44>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	60fb      	str	r3, [r7, #12]
 8003bfe:	e001      	b.n	8003c04 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003c00:	2300      	movs	r3, #0
 8003c02:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003c04:	68fb      	ldr	r3, [r7, #12]
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3714      	adds	r7, #20
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	20000c10 	.word	0x20000c10

08003c18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003c20:	f7ff fa90 	bl	8003144 <xTaskGetTickCount>
 8003c24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003c26:	4b0b      	ldr	r3, [pc, #44]	; (8003c54 <prvSampleTimeNow+0x3c>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d205      	bcs.n	8003c3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003c30:	f000 f930 	bl	8003e94 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	601a      	str	r2, [r3, #0]
 8003c3a:	e002      	b.n	8003c42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003c42:	4a04      	ldr	r2, [pc, #16]	; (8003c54 <prvSampleTimeNow+0x3c>)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003c48:	68fb      	ldr	r3, [r7, #12]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	20000c20 	.word	0x20000c20

08003c58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
 8003c64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003c66:	2300      	movs	r3, #0
 8003c68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d812      	bhi.n	8003ca4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	1ad2      	subs	r2, r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d302      	bcc.n	8003c92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	e01b      	b.n	8003cca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003c92:	4b10      	ldr	r3, [pc, #64]	; (8003cd4 <prvInsertTimerInActiveList+0x7c>)
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	3304      	adds	r3, #4
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	4610      	mov	r0, r2
 8003c9e:	f7fe fa3a 	bl	8002116 <vListInsert>
 8003ca2:	e012      	b.n	8003cca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d206      	bcs.n	8003cba <prvInsertTimerInActiveList+0x62>
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d302      	bcc.n	8003cba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	e007      	b.n	8003cca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003cba:	4b07      	ldr	r3, [pc, #28]	; (8003cd8 <prvInsertTimerInActiveList+0x80>)
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	4610      	mov	r0, r2
 8003cc6:	f7fe fa26 	bl	8002116 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003cca:	697b      	ldr	r3, [r7, #20]
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3718      	adds	r7, #24
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	20000c14 	.word	0x20000c14
 8003cd8:	20000c10 	.word	0x20000c10

08003cdc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b08e      	sub	sp, #56	; 0x38
 8003ce0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ce2:	e0c6      	b.n	8003e72 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	da17      	bge.n	8003d1a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003cea:	1d3b      	adds	r3, r7, #4
 8003cec:	3304      	adds	r3, #4
 8003cee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d109      	bne.n	8003d0a <prvProcessReceivedCommands+0x2e>
 8003cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfa:	f383 8811 	msr	BASEPRI, r3
 8003cfe:	f3bf 8f6f 	isb	sy
 8003d02:	f3bf 8f4f 	dsb	sy
 8003d06:	61fb      	str	r3, [r7, #28]
 8003d08:	e7fe      	b.n	8003d08 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d10:	6850      	ldr	r0, [r2, #4]
 8003d12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d14:	6892      	ldr	r2, [r2, #8]
 8003d16:	4611      	mov	r1, r2
 8003d18:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f2c0 80a7 	blt.w	8003e70 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d004      	beq.n	8003d38 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d30:	3304      	adds	r3, #4
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7fe fa28 	bl	8002188 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d38:	463b      	mov	r3, r7
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7ff ff6c 	bl	8003c18 <prvSampleTimeNow>
 8003d40:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b09      	cmp	r3, #9
 8003d46:	f200 8094 	bhi.w	8003e72 <prvProcessReceivedCommands+0x196>
 8003d4a:	a201      	add	r2, pc, #4	; (adr r2, 8003d50 <prvProcessReceivedCommands+0x74>)
 8003d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d50:	08003d79 	.word	0x08003d79
 8003d54:	08003d79 	.word	0x08003d79
 8003d58:	08003d79 	.word	0x08003d79
 8003d5c:	08003deb 	.word	0x08003deb
 8003d60:	08003dff 	.word	0x08003dff
 8003d64:	08003e47 	.word	0x08003e47
 8003d68:	08003d79 	.word	0x08003d79
 8003d6c:	08003d79 	.word	0x08003d79
 8003d70:	08003deb 	.word	0x08003deb
 8003d74:	08003dff 	.word	0x08003dff
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d7e:	f043 0301 	orr.w	r3, r3, #1
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	18d1      	adds	r1, r2, r3
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d98:	f7ff ff5e 	bl	8003c58 <prvInsertTimerInActiveList>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d067      	beq.n	8003e72 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003da8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d05c      	beq.n	8003e72 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	441a      	add	r2, r3
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dca:	f7ff fe09 	bl	80039e0 <xTimerGenericCommand>
 8003dce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003dd0:	6a3b      	ldr	r3, [r7, #32]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d14d      	bne.n	8003e72 <prvProcessReceivedCommands+0x196>
 8003dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dda:	f383 8811 	msr	BASEPRI, r3
 8003dde:	f3bf 8f6f 	isb	sy
 8003de2:	f3bf 8f4f 	dsb	sy
 8003de6:	61bb      	str	r3, [r7, #24]
 8003de8:	e7fe      	b.n	8003de8 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003df0:	f023 0301 	bic.w	r3, r3, #1
 8003df4:	b2da      	uxtb	r2, r3
 8003df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003dfc:	e039      	b.n	8003e72 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e04:	f043 0301 	orr.w	r3, r3, #1
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e14:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d109      	bne.n	8003e32 <prvProcessReceivedCommands+0x156>
 8003e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e22:	f383 8811 	msr	BASEPRI, r3
 8003e26:	f3bf 8f6f 	isb	sy
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	617b      	str	r3, [r7, #20]
 8003e30:	e7fe      	b.n	8003e30 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e34:	699a      	ldr	r2, [r3, #24]
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	18d1      	adds	r1, r2, r3
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e40:	f7ff ff0a 	bl	8003c58 <prvInsertTimerInActiveList>
					break;
 8003e44:	e015      	b.n	8003e72 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d103      	bne.n	8003e5c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8003e54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e56:	f000 fbc5 	bl	80045e4 <vPortFree>
 8003e5a:	e00a      	b.n	8003e72 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e62:	f023 0301 	bic.w	r3, r3, #1
 8003e66:	b2da      	uxtb	r2, r3
 8003e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003e6e:	e000      	b.n	8003e72 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003e70:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e72:	4b07      	ldr	r3, [pc, #28]	; (8003e90 <prvProcessReceivedCommands+0x1b4>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	1d39      	adds	r1, r7, #4
 8003e78:	2200      	movs	r2, #0
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fe fc3a 	bl	80026f4 <xQueueReceive>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f47f af2e 	bne.w	8003ce4 <prvProcessReceivedCommands+0x8>
	}
}
 8003e88:	bf00      	nop
 8003e8a:	3730      	adds	r7, #48	; 0x30
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	20000c18 	.word	0x20000c18

08003e94 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b088      	sub	sp, #32
 8003e98:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003e9a:	e047      	b.n	8003f2c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e9c:	4b2d      	ldr	r3, [pc, #180]	; (8003f54 <prvSwitchTimerLists+0xc0>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ea6:	4b2b      	ldr	r3, [pc, #172]	; (8003f54 <prvSwitchTimerLists+0xc0>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7fe f967 	bl	8002188 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d02d      	beq.n	8003f2c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d90e      	bls.n	8003f00 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003eee:	4b19      	ldr	r3, [pc, #100]	; (8003f54 <prvSwitchTimerLists+0xc0>)
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	3304      	adds	r3, #4
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	4610      	mov	r0, r2
 8003efa:	f7fe f90c 	bl	8002116 <vListInsert>
 8003efe:	e015      	b.n	8003f2c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f00:	2300      	movs	r3, #0
 8003f02:	9300      	str	r3, [sp, #0]
 8003f04:	2300      	movs	r3, #0
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	2100      	movs	r1, #0
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f7ff fd68 	bl	80039e0 <xTimerGenericCommand>
 8003f10:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d109      	bne.n	8003f2c <prvSwitchTimerLists+0x98>
 8003f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1c:	f383 8811 	msr	BASEPRI, r3
 8003f20:	f3bf 8f6f 	isb	sy
 8003f24:	f3bf 8f4f 	dsb	sy
 8003f28:	603b      	str	r3, [r7, #0]
 8003f2a:	e7fe      	b.n	8003f2a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f2c:	4b09      	ldr	r3, [pc, #36]	; (8003f54 <prvSwitchTimerLists+0xc0>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1b2      	bne.n	8003e9c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003f36:	4b07      	ldr	r3, [pc, #28]	; (8003f54 <prvSwitchTimerLists+0xc0>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003f3c:	4b06      	ldr	r3, [pc, #24]	; (8003f58 <prvSwitchTimerLists+0xc4>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a04      	ldr	r2, [pc, #16]	; (8003f54 <prvSwitchTimerLists+0xc0>)
 8003f42:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003f44:	4a04      	ldr	r2, [pc, #16]	; (8003f58 <prvSwitchTimerLists+0xc4>)
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	6013      	str	r3, [r2, #0]
}
 8003f4a:	bf00      	nop
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	20000c10 	.word	0x20000c10
 8003f58:	20000c14 	.word	0x20000c14

08003f5c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003f62:	f000 f963 	bl	800422c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003f66:	4b15      	ldr	r3, [pc, #84]	; (8003fbc <prvCheckForValidListAndQueue+0x60>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d120      	bne.n	8003fb0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003f6e:	4814      	ldr	r0, [pc, #80]	; (8003fc0 <prvCheckForValidListAndQueue+0x64>)
 8003f70:	f7fe f880 	bl	8002074 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003f74:	4813      	ldr	r0, [pc, #76]	; (8003fc4 <prvCheckForValidListAndQueue+0x68>)
 8003f76:	f7fe f87d 	bl	8002074 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003f7a:	4b13      	ldr	r3, [pc, #76]	; (8003fc8 <prvCheckForValidListAndQueue+0x6c>)
 8003f7c:	4a10      	ldr	r2, [pc, #64]	; (8003fc0 <prvCheckForValidListAndQueue+0x64>)
 8003f7e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003f80:	4b12      	ldr	r3, [pc, #72]	; (8003fcc <prvCheckForValidListAndQueue+0x70>)
 8003f82:	4a10      	ldr	r2, [pc, #64]	; (8003fc4 <prvCheckForValidListAndQueue+0x68>)
 8003f84:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003f86:	2300      	movs	r3, #0
 8003f88:	9300      	str	r3, [sp, #0]
 8003f8a:	4b11      	ldr	r3, [pc, #68]	; (8003fd0 <prvCheckForValidListAndQueue+0x74>)
 8003f8c:	4a11      	ldr	r2, [pc, #68]	; (8003fd4 <prvCheckForValidListAndQueue+0x78>)
 8003f8e:	2110      	movs	r1, #16
 8003f90:	200a      	movs	r0, #10
 8003f92:	f7fe f98b 	bl	80022ac <xQueueGenericCreateStatic>
 8003f96:	4602      	mov	r2, r0
 8003f98:	4b08      	ldr	r3, [pc, #32]	; (8003fbc <prvCheckForValidListAndQueue+0x60>)
 8003f9a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003f9c:	4b07      	ldr	r3, [pc, #28]	; (8003fbc <prvCheckForValidListAndQueue+0x60>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d005      	beq.n	8003fb0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003fa4:	4b05      	ldr	r3, [pc, #20]	; (8003fbc <prvCheckForValidListAndQueue+0x60>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	490b      	ldr	r1, [pc, #44]	; (8003fd8 <prvCheckForValidListAndQueue+0x7c>)
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fe fd8e 	bl	8002acc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003fb0:	f000 f96a 	bl	8004288 <vPortExitCritical>
}
 8003fb4:	bf00      	nop
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	20000c18 	.word	0x20000c18
 8003fc0:	20000be8 	.word	0x20000be8
 8003fc4:	20000bfc 	.word	0x20000bfc
 8003fc8:	20000c10 	.word	0x20000c10
 8003fcc:	20000c14 	.word	0x20000c14
 8003fd0:	20000cc4 	.word	0x20000cc4
 8003fd4:	20000c24 	.word	0x20000c24
 8003fd8:	080048d4 	.word	0x080048d4

08003fdc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	3b04      	subs	r3, #4
 8003fec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ff4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	3b04      	subs	r3, #4
 8003ffa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	f023 0201 	bic.w	r2, r3, #1
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	3b04      	subs	r3, #4
 800400a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800400c:	4a0c      	ldr	r2, [pc, #48]	; (8004040 <pxPortInitialiseStack+0x64>)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	3b14      	subs	r3, #20
 8004016:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	3b04      	subs	r3, #4
 8004022:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f06f 0202 	mvn.w	r2, #2
 800402a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	3b20      	subs	r3, #32
 8004030:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004032:	68fb      	ldr	r3, [r7, #12]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	08004045 	.word	0x08004045

08004044 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800404a:	2300      	movs	r3, #0
 800404c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800404e:	4b11      	ldr	r3, [pc, #68]	; (8004094 <prvTaskExitError+0x50>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004056:	d009      	beq.n	800406c <prvTaskExitError+0x28>
 8004058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405c:	f383 8811 	msr	BASEPRI, r3
 8004060:	f3bf 8f6f 	isb	sy
 8004064:	f3bf 8f4f 	dsb	sy
 8004068:	60fb      	str	r3, [r7, #12]
 800406a:	e7fe      	b.n	800406a <prvTaskExitError+0x26>
 800406c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004070:	f383 8811 	msr	BASEPRI, r3
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800407e:	bf00      	nop
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d0fc      	beq.n	8004080 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004086:	bf00      	nop
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	2000000c 	.word	0x2000000c
	...

080040a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80040a0:	4b07      	ldr	r3, [pc, #28]	; (80040c0 <pxCurrentTCBConst2>)
 80040a2:	6819      	ldr	r1, [r3, #0]
 80040a4:	6808      	ldr	r0, [r1, #0]
 80040a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040aa:	f380 8809 	msr	PSP, r0
 80040ae:	f3bf 8f6f 	isb	sy
 80040b2:	f04f 0000 	mov.w	r0, #0
 80040b6:	f380 8811 	msr	BASEPRI, r0
 80040ba:	4770      	bx	lr
 80040bc:	f3af 8000 	nop.w

080040c0 <pxCurrentTCBConst2>:
 80040c0:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80040c4:	bf00      	nop
 80040c6:	bf00      	nop

080040c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80040c8:	4808      	ldr	r0, [pc, #32]	; (80040ec <prvPortStartFirstTask+0x24>)
 80040ca:	6800      	ldr	r0, [r0, #0]
 80040cc:	6800      	ldr	r0, [r0, #0]
 80040ce:	f380 8808 	msr	MSP, r0
 80040d2:	f04f 0000 	mov.w	r0, #0
 80040d6:	f380 8814 	msr	CONTROL, r0
 80040da:	b662      	cpsie	i
 80040dc:	b661      	cpsie	f
 80040de:	f3bf 8f4f 	dsb	sy
 80040e2:	f3bf 8f6f 	isb	sy
 80040e6:	df00      	svc	0
 80040e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80040ea:	bf00      	nop
 80040ec:	e000ed08 	.word	0xe000ed08

080040f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80040f6:	4b44      	ldr	r3, [pc, #272]	; (8004208 <xPortStartScheduler+0x118>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a44      	ldr	r2, [pc, #272]	; (800420c <xPortStartScheduler+0x11c>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d109      	bne.n	8004114 <xPortStartScheduler+0x24>
 8004100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004104:	f383 8811 	msr	BASEPRI, r3
 8004108:	f3bf 8f6f 	isb	sy
 800410c:	f3bf 8f4f 	dsb	sy
 8004110:	613b      	str	r3, [r7, #16]
 8004112:	e7fe      	b.n	8004112 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004114:	4b3c      	ldr	r3, [pc, #240]	; (8004208 <xPortStartScheduler+0x118>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a3d      	ldr	r2, [pc, #244]	; (8004210 <xPortStartScheduler+0x120>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d109      	bne.n	8004132 <xPortStartScheduler+0x42>
 800411e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004122:	f383 8811 	msr	BASEPRI, r3
 8004126:	f3bf 8f6f 	isb	sy
 800412a:	f3bf 8f4f 	dsb	sy
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	e7fe      	b.n	8004130 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004132:	4b38      	ldr	r3, [pc, #224]	; (8004214 <xPortStartScheduler+0x124>)
 8004134:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	b2db      	uxtb	r3, r3
 800413c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	22ff      	movs	r2, #255	; 0xff
 8004142:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	b2db      	uxtb	r3, r3
 800414a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800414c:	78fb      	ldrb	r3, [r7, #3]
 800414e:	b2db      	uxtb	r3, r3
 8004150:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004154:	b2da      	uxtb	r2, r3
 8004156:	4b30      	ldr	r3, [pc, #192]	; (8004218 <xPortStartScheduler+0x128>)
 8004158:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800415a:	4b30      	ldr	r3, [pc, #192]	; (800421c <xPortStartScheduler+0x12c>)
 800415c:	2207      	movs	r2, #7
 800415e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004160:	e009      	b.n	8004176 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004162:	4b2e      	ldr	r3, [pc, #184]	; (800421c <xPortStartScheduler+0x12c>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	3b01      	subs	r3, #1
 8004168:	4a2c      	ldr	r2, [pc, #176]	; (800421c <xPortStartScheduler+0x12c>)
 800416a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800416c:	78fb      	ldrb	r3, [r7, #3]
 800416e:	b2db      	uxtb	r3, r3
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	b2db      	uxtb	r3, r3
 8004174:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004176:	78fb      	ldrb	r3, [r7, #3]
 8004178:	b2db      	uxtb	r3, r3
 800417a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800417e:	2b80      	cmp	r3, #128	; 0x80
 8004180:	d0ef      	beq.n	8004162 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004182:	4b26      	ldr	r3, [pc, #152]	; (800421c <xPortStartScheduler+0x12c>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f1c3 0307 	rsb	r3, r3, #7
 800418a:	2b04      	cmp	r3, #4
 800418c:	d009      	beq.n	80041a2 <xPortStartScheduler+0xb2>
 800418e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004192:	f383 8811 	msr	BASEPRI, r3
 8004196:	f3bf 8f6f 	isb	sy
 800419a:	f3bf 8f4f 	dsb	sy
 800419e:	60bb      	str	r3, [r7, #8]
 80041a0:	e7fe      	b.n	80041a0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80041a2:	4b1e      	ldr	r3, [pc, #120]	; (800421c <xPortStartScheduler+0x12c>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	021b      	lsls	r3, r3, #8
 80041a8:	4a1c      	ldr	r2, [pc, #112]	; (800421c <xPortStartScheduler+0x12c>)
 80041aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80041ac:	4b1b      	ldr	r3, [pc, #108]	; (800421c <xPortStartScheduler+0x12c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041b4:	4a19      	ldr	r2, [pc, #100]	; (800421c <xPortStartScheduler+0x12c>)
 80041b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80041c0:	4b17      	ldr	r3, [pc, #92]	; (8004220 <xPortStartScheduler+0x130>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a16      	ldr	r2, [pc, #88]	; (8004220 <xPortStartScheduler+0x130>)
 80041c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80041cc:	4b14      	ldr	r3, [pc, #80]	; (8004220 <xPortStartScheduler+0x130>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a13      	ldr	r2, [pc, #76]	; (8004220 <xPortStartScheduler+0x130>)
 80041d2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80041d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80041d8:	f000 f8d6 	bl	8004388 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80041dc:	4b11      	ldr	r3, [pc, #68]	; (8004224 <xPortStartScheduler+0x134>)
 80041de:	2200      	movs	r2, #0
 80041e0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80041e2:	f000 f8f5 	bl	80043d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80041e6:	4b10      	ldr	r3, [pc, #64]	; (8004228 <xPortStartScheduler+0x138>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a0f      	ldr	r2, [pc, #60]	; (8004228 <xPortStartScheduler+0x138>)
 80041ec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80041f0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80041f2:	f7ff ff69 	bl	80040c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80041f6:	f7ff f86d 	bl	80032d4 <vTaskSwitchContext>
	prvTaskExitError();
 80041fa:	f7ff ff23 	bl	8004044 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3718      	adds	r7, #24
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	e000ed00 	.word	0xe000ed00
 800420c:	410fc271 	.word	0x410fc271
 8004210:	410fc270 	.word	0x410fc270
 8004214:	e000e400 	.word	0xe000e400
 8004218:	20000d14 	.word	0x20000d14
 800421c:	20000d18 	.word	0x20000d18
 8004220:	e000ed20 	.word	0xe000ed20
 8004224:	2000000c 	.word	0x2000000c
 8004228:	e000ef34 	.word	0xe000ef34

0800422c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004236:	f383 8811 	msr	BASEPRI, r3
 800423a:	f3bf 8f6f 	isb	sy
 800423e:	f3bf 8f4f 	dsb	sy
 8004242:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004244:	4b0e      	ldr	r3, [pc, #56]	; (8004280 <vPortEnterCritical+0x54>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	3301      	adds	r3, #1
 800424a:	4a0d      	ldr	r2, [pc, #52]	; (8004280 <vPortEnterCritical+0x54>)
 800424c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800424e:	4b0c      	ldr	r3, [pc, #48]	; (8004280 <vPortEnterCritical+0x54>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d10e      	bne.n	8004274 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004256:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <vPortEnterCritical+0x58>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	d009      	beq.n	8004274 <vPortEnterCritical+0x48>
 8004260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004264:	f383 8811 	msr	BASEPRI, r3
 8004268:	f3bf 8f6f 	isb	sy
 800426c:	f3bf 8f4f 	dsb	sy
 8004270:	603b      	str	r3, [r7, #0]
 8004272:	e7fe      	b.n	8004272 <vPortEnterCritical+0x46>
	}
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	2000000c 	.word	0x2000000c
 8004284:	e000ed04 	.word	0xe000ed04

08004288 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800428e:	4b11      	ldr	r3, [pc, #68]	; (80042d4 <vPortExitCritical+0x4c>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d109      	bne.n	80042aa <vPortExitCritical+0x22>
 8004296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429a:	f383 8811 	msr	BASEPRI, r3
 800429e:	f3bf 8f6f 	isb	sy
 80042a2:	f3bf 8f4f 	dsb	sy
 80042a6:	607b      	str	r3, [r7, #4]
 80042a8:	e7fe      	b.n	80042a8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80042aa:	4b0a      	ldr	r3, [pc, #40]	; (80042d4 <vPortExitCritical+0x4c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	3b01      	subs	r3, #1
 80042b0:	4a08      	ldr	r2, [pc, #32]	; (80042d4 <vPortExitCritical+0x4c>)
 80042b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80042b4:	4b07      	ldr	r3, [pc, #28]	; (80042d4 <vPortExitCritical+0x4c>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d104      	bne.n	80042c6 <vPortExitCritical+0x3e>
 80042bc:	2300      	movs	r3, #0
 80042be:	603b      	str	r3, [r7, #0]
	__asm volatile
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80042c6:	bf00      	nop
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	2000000c 	.word	0x2000000c
	...

080042e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80042e0:	f3ef 8009 	mrs	r0, PSP
 80042e4:	f3bf 8f6f 	isb	sy
 80042e8:	4b15      	ldr	r3, [pc, #84]	; (8004340 <pxCurrentTCBConst>)
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	f01e 0f10 	tst.w	lr, #16
 80042f0:	bf08      	it	eq
 80042f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80042f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042fa:	6010      	str	r0, [r2, #0]
 80042fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004300:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004304:	f380 8811 	msr	BASEPRI, r0
 8004308:	f3bf 8f4f 	dsb	sy
 800430c:	f3bf 8f6f 	isb	sy
 8004310:	f7fe ffe0 	bl	80032d4 <vTaskSwitchContext>
 8004314:	f04f 0000 	mov.w	r0, #0
 8004318:	f380 8811 	msr	BASEPRI, r0
 800431c:	bc09      	pop	{r0, r3}
 800431e:	6819      	ldr	r1, [r3, #0]
 8004320:	6808      	ldr	r0, [r1, #0]
 8004322:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004326:	f01e 0f10 	tst.w	lr, #16
 800432a:	bf08      	it	eq
 800432c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004330:	f380 8809 	msr	PSP, r0
 8004334:	f3bf 8f6f 	isb	sy
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	f3af 8000 	nop.w

08004340 <pxCurrentTCBConst>:
 8004340:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004344:	bf00      	nop
 8004346:	bf00      	nop

08004348 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
	__asm volatile
 800434e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004352:	f383 8811 	msr	BASEPRI, r3
 8004356:	f3bf 8f6f 	isb	sy
 800435a:	f3bf 8f4f 	dsb	sy
 800435e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004360:	f7fe ff00 	bl	8003164 <xTaskIncrementTick>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800436a:	4b06      	ldr	r3, [pc, #24]	; (8004384 <SysTick_Handler+0x3c>)
 800436c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004370:	601a      	str	r2, [r3, #0]
 8004372:	2300      	movs	r3, #0
 8004374:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800437c:	bf00      	nop
 800437e:	3708      	adds	r7, #8
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	e000ed04 	.word	0xe000ed04

08004388 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800438c:	4b0b      	ldr	r3, [pc, #44]	; (80043bc <vPortSetupTimerInterrupt+0x34>)
 800438e:	2200      	movs	r2, #0
 8004390:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004392:	4b0b      	ldr	r3, [pc, #44]	; (80043c0 <vPortSetupTimerInterrupt+0x38>)
 8004394:	2200      	movs	r2, #0
 8004396:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004398:	4b0a      	ldr	r3, [pc, #40]	; (80043c4 <vPortSetupTimerInterrupt+0x3c>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a0a      	ldr	r2, [pc, #40]	; (80043c8 <vPortSetupTimerInterrupt+0x40>)
 800439e:	fba2 2303 	umull	r2, r3, r2, r3
 80043a2:	099b      	lsrs	r3, r3, #6
 80043a4:	4a09      	ldr	r2, [pc, #36]	; (80043cc <vPortSetupTimerInterrupt+0x44>)
 80043a6:	3b01      	subs	r3, #1
 80043a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80043aa:	4b04      	ldr	r3, [pc, #16]	; (80043bc <vPortSetupTimerInterrupt+0x34>)
 80043ac:	2207      	movs	r2, #7
 80043ae:	601a      	str	r2, [r3, #0]
}
 80043b0:	bf00      	nop
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	e000e010 	.word	0xe000e010
 80043c0:	e000e018 	.word	0xe000e018
 80043c4:	20000000 	.word	0x20000000
 80043c8:	10624dd3 	.word	0x10624dd3
 80043cc:	e000e014 	.word	0xe000e014

080043d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80043d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80043e0 <vPortEnableVFP+0x10>
 80043d4:	6801      	ldr	r1, [r0, #0]
 80043d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80043da:	6001      	str	r1, [r0, #0]
 80043dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80043de:	bf00      	nop
 80043e0:	e000ed88 	.word	0xe000ed88

080043e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80043ea:	f3ef 8305 	mrs	r3, IPSR
 80043ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2b0f      	cmp	r3, #15
 80043f4:	d913      	bls.n	800441e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80043f6:	4a16      	ldr	r2, [pc, #88]	; (8004450 <vPortValidateInterruptPriority+0x6c>)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	4413      	add	r3, r2
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004400:	4b14      	ldr	r3, [pc, #80]	; (8004454 <vPortValidateInterruptPriority+0x70>)
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	7afa      	ldrb	r2, [r7, #11]
 8004406:	429a      	cmp	r2, r3
 8004408:	d209      	bcs.n	800441e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800440a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440e:	f383 8811 	msr	BASEPRI, r3
 8004412:	f3bf 8f6f 	isb	sy
 8004416:	f3bf 8f4f 	dsb	sy
 800441a:	607b      	str	r3, [r7, #4]
 800441c:	e7fe      	b.n	800441c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800441e:	4b0e      	ldr	r3, [pc, #56]	; (8004458 <vPortValidateInterruptPriority+0x74>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004426:	4b0d      	ldr	r3, [pc, #52]	; (800445c <vPortValidateInterruptPriority+0x78>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	429a      	cmp	r2, r3
 800442c:	d909      	bls.n	8004442 <vPortValidateInterruptPriority+0x5e>
 800442e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004432:	f383 8811 	msr	BASEPRI, r3
 8004436:	f3bf 8f6f 	isb	sy
 800443a:	f3bf 8f4f 	dsb	sy
 800443e:	603b      	str	r3, [r7, #0]
 8004440:	e7fe      	b.n	8004440 <vPortValidateInterruptPriority+0x5c>
	}
 8004442:	bf00      	nop
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	e000e3f0 	.word	0xe000e3f0
 8004454:	20000d14 	.word	0x20000d14
 8004458:	e000ed0c 	.word	0xe000ed0c
 800445c:	20000d18 	.word	0x20000d18

08004460 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b08a      	sub	sp, #40	; 0x28
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004468:	2300      	movs	r3, #0
 800446a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800446c:	f7fe fdc0 	bl	8002ff0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004470:	4b57      	ldr	r3, [pc, #348]	; (80045d0 <pvPortMalloc+0x170>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d101      	bne.n	800447c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004478:	f000 f90c 	bl	8004694 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800447c:	4b55      	ldr	r3, [pc, #340]	; (80045d4 <pvPortMalloc+0x174>)
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4013      	ands	r3, r2
 8004484:	2b00      	cmp	r3, #0
 8004486:	f040 808c 	bne.w	80045a2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d01c      	beq.n	80044ca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004490:	2208      	movs	r2, #8
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4413      	add	r3, r2
 8004496:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f003 0307 	and.w	r3, r3, #7
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d013      	beq.n	80044ca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f023 0307 	bic.w	r3, r3, #7
 80044a8:	3308      	adds	r3, #8
 80044aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f003 0307 	and.w	r3, r3, #7
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d009      	beq.n	80044ca <pvPortMalloc+0x6a>
 80044b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ba:	f383 8811 	msr	BASEPRI, r3
 80044be:	f3bf 8f6f 	isb	sy
 80044c2:	f3bf 8f4f 	dsb	sy
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	e7fe      	b.n	80044c8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d068      	beq.n	80045a2 <pvPortMalloc+0x142>
 80044d0:	4b41      	ldr	r3, [pc, #260]	; (80045d8 <pvPortMalloc+0x178>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d863      	bhi.n	80045a2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80044da:	4b40      	ldr	r3, [pc, #256]	; (80045dc <pvPortMalloc+0x17c>)
 80044dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80044de:	4b3f      	ldr	r3, [pc, #252]	; (80045dc <pvPortMalloc+0x17c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044e4:	e004      	b.n	80044f0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d903      	bls.n	8004502 <pvPortMalloc+0xa2>
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1f1      	bne.n	80044e6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004502:	4b33      	ldr	r3, [pc, #204]	; (80045d0 <pvPortMalloc+0x170>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004508:	429a      	cmp	r2, r3
 800450a:	d04a      	beq.n	80045a2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800450c:	6a3b      	ldr	r3, [r7, #32]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2208      	movs	r2, #8
 8004512:	4413      	add	r3, r2
 8004514:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	6a3b      	ldr	r3, [r7, #32]
 800451c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	1ad2      	subs	r2, r2, r3
 8004526:	2308      	movs	r3, #8
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	429a      	cmp	r2, r3
 800452c:	d91e      	bls.n	800456c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800452e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4413      	add	r3, r2
 8004534:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	f003 0307 	and.w	r3, r3, #7
 800453c:	2b00      	cmp	r3, #0
 800453e:	d009      	beq.n	8004554 <pvPortMalloc+0xf4>
 8004540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004544:	f383 8811 	msr	BASEPRI, r3
 8004548:	f3bf 8f6f 	isb	sy
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	613b      	str	r3, [r7, #16]
 8004552:	e7fe      	b.n	8004552 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	1ad2      	subs	r2, r2, r3
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004566:	69b8      	ldr	r0, [r7, #24]
 8004568:	f000 f8f6 	bl	8004758 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800456c:	4b1a      	ldr	r3, [pc, #104]	; (80045d8 <pvPortMalloc+0x178>)
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	4a18      	ldr	r2, [pc, #96]	; (80045d8 <pvPortMalloc+0x178>)
 8004578:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800457a:	4b17      	ldr	r3, [pc, #92]	; (80045d8 <pvPortMalloc+0x178>)
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	4b18      	ldr	r3, [pc, #96]	; (80045e0 <pvPortMalloc+0x180>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	429a      	cmp	r2, r3
 8004584:	d203      	bcs.n	800458e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004586:	4b14      	ldr	r3, [pc, #80]	; (80045d8 <pvPortMalloc+0x178>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a15      	ldr	r2, [pc, #84]	; (80045e0 <pvPortMalloc+0x180>)
 800458c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	4b10      	ldr	r3, [pc, #64]	; (80045d4 <pvPortMalloc+0x174>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	431a      	orrs	r2, r3
 8004598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	2200      	movs	r2, #0
 80045a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80045a2:	f7fe fd33 	bl	800300c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	f003 0307 	and.w	r3, r3, #7
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d009      	beq.n	80045c4 <pvPortMalloc+0x164>
 80045b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b4:	f383 8811 	msr	BASEPRI, r3
 80045b8:	f3bf 8f6f 	isb	sy
 80045bc:	f3bf 8f4f 	dsb	sy
 80045c0:	60fb      	str	r3, [r7, #12]
 80045c2:	e7fe      	b.n	80045c2 <pvPortMalloc+0x162>
	return pvReturn;
 80045c4:	69fb      	ldr	r3, [r7, #28]
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3728      	adds	r7, #40	; 0x28
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	200018dc 	.word	0x200018dc
 80045d4:	200018e8 	.word	0x200018e8
 80045d8:	200018e0 	.word	0x200018e0
 80045dc:	200018d4 	.word	0x200018d4
 80045e0:	200018e4 	.word	0x200018e4

080045e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d046      	beq.n	8004684 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80045f6:	2308      	movs	r3, #8
 80045f8:	425b      	negs	r3, r3
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	4413      	add	r3, r2
 80045fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	4b20      	ldr	r3, [pc, #128]	; (800468c <vPortFree+0xa8>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4013      	ands	r3, r2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d109      	bne.n	8004626 <vPortFree+0x42>
 8004612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004616:	f383 8811 	msr	BASEPRI, r3
 800461a:	f3bf 8f6f 	isb	sy
 800461e:	f3bf 8f4f 	dsb	sy
 8004622:	60fb      	str	r3, [r7, #12]
 8004624:	e7fe      	b.n	8004624 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d009      	beq.n	8004642 <vPortFree+0x5e>
 800462e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004632:	f383 8811 	msr	BASEPRI, r3
 8004636:	f3bf 8f6f 	isb	sy
 800463a:	f3bf 8f4f 	dsb	sy
 800463e:	60bb      	str	r3, [r7, #8]
 8004640:	e7fe      	b.n	8004640 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	685a      	ldr	r2, [r3, #4]
 8004646:	4b11      	ldr	r3, [pc, #68]	; (800468c <vPortFree+0xa8>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4013      	ands	r3, r2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d019      	beq.n	8004684 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d115      	bne.n	8004684 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	4b0b      	ldr	r3, [pc, #44]	; (800468c <vPortFree+0xa8>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	43db      	mvns	r3, r3
 8004662:	401a      	ands	r2, r3
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004668:	f7fe fcc2 	bl	8002ff0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	4b07      	ldr	r3, [pc, #28]	; (8004690 <vPortFree+0xac>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4413      	add	r3, r2
 8004676:	4a06      	ldr	r2, [pc, #24]	; (8004690 <vPortFree+0xac>)
 8004678:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800467a:	6938      	ldr	r0, [r7, #16]
 800467c:	f000 f86c 	bl	8004758 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004680:	f7fe fcc4 	bl	800300c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004684:	bf00      	nop
 8004686:	3718      	adds	r7, #24
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	200018e8 	.word	0x200018e8
 8004690:	200018e0 	.word	0x200018e0

08004694 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800469a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800469e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80046a0:	4b27      	ldr	r3, [pc, #156]	; (8004740 <prvHeapInit+0xac>)
 80046a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f003 0307 	and.w	r3, r3, #7
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00c      	beq.n	80046c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	3307      	adds	r3, #7
 80046b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f023 0307 	bic.w	r3, r3, #7
 80046ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	4a1f      	ldr	r2, [pc, #124]	; (8004740 <prvHeapInit+0xac>)
 80046c4:	4413      	add	r3, r2
 80046c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80046cc:	4a1d      	ldr	r2, [pc, #116]	; (8004744 <prvHeapInit+0xb0>)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80046d2:	4b1c      	ldr	r3, [pc, #112]	; (8004744 <prvHeapInit+0xb0>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	4413      	add	r3, r2
 80046de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80046e0:	2208      	movs	r2, #8
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	1a9b      	subs	r3, r3, r2
 80046e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f023 0307 	bic.w	r3, r3, #7
 80046ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4a15      	ldr	r2, [pc, #84]	; (8004748 <prvHeapInit+0xb4>)
 80046f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80046f6:	4b14      	ldr	r3, [pc, #80]	; (8004748 <prvHeapInit+0xb4>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2200      	movs	r2, #0
 80046fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80046fe:	4b12      	ldr	r3, [pc, #72]	; (8004748 <prvHeapInit+0xb4>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2200      	movs	r2, #0
 8004704:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	1ad2      	subs	r2, r2, r3
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004714:	4b0c      	ldr	r3, [pc, #48]	; (8004748 <prvHeapInit+0xb4>)
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	4a0a      	ldr	r2, [pc, #40]	; (800474c <prvHeapInit+0xb8>)
 8004722:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	4a09      	ldr	r2, [pc, #36]	; (8004750 <prvHeapInit+0xbc>)
 800472a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800472c:	4b09      	ldr	r3, [pc, #36]	; (8004754 <prvHeapInit+0xc0>)
 800472e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004732:	601a      	str	r2, [r3, #0]
}
 8004734:	bf00      	nop
 8004736:	3714      	adds	r7, #20
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	20000d1c 	.word	0x20000d1c
 8004744:	200018d4 	.word	0x200018d4
 8004748:	200018dc 	.word	0x200018dc
 800474c:	200018e4 	.word	0x200018e4
 8004750:	200018e0 	.word	0x200018e0
 8004754:	200018e8 	.word	0x200018e8

08004758 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004760:	4b28      	ldr	r3, [pc, #160]	; (8004804 <prvInsertBlockIntoFreeList+0xac>)
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	e002      	b.n	800476c <prvInsertBlockIntoFreeList+0x14>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	429a      	cmp	r2, r3
 8004774:	d8f7      	bhi.n	8004766 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	68ba      	ldr	r2, [r7, #8]
 8004780:	4413      	add	r3, r2
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	429a      	cmp	r2, r3
 8004786:	d108      	bne.n	800479a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	685a      	ldr	r2, [r3, #4]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	441a      	add	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	441a      	add	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d118      	bne.n	80047e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	4b15      	ldr	r3, [pc, #84]	; (8004808 <prvInsertBlockIntoFreeList+0xb0>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d00d      	beq.n	80047d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	441a      	add	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	e008      	b.n	80047e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80047d6:	4b0c      	ldr	r3, [pc, #48]	; (8004808 <prvInsertBlockIntoFreeList+0xb0>)
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	601a      	str	r2, [r3, #0]
 80047de:	e003      	b.n	80047e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d002      	beq.n	80047f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047f6:	bf00      	nop
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	200018d4 	.word	0x200018d4
 8004808:	200018dc 	.word	0x200018dc

0800480c <__libc_init_array>:
 800480c:	b570      	push	{r4, r5, r6, lr}
 800480e:	4e0d      	ldr	r6, [pc, #52]	; (8004844 <__libc_init_array+0x38>)
 8004810:	4c0d      	ldr	r4, [pc, #52]	; (8004848 <__libc_init_array+0x3c>)
 8004812:	1ba4      	subs	r4, r4, r6
 8004814:	10a4      	asrs	r4, r4, #2
 8004816:	2500      	movs	r5, #0
 8004818:	42a5      	cmp	r5, r4
 800481a:	d109      	bne.n	8004830 <__libc_init_array+0x24>
 800481c:	4e0b      	ldr	r6, [pc, #44]	; (800484c <__libc_init_array+0x40>)
 800481e:	4c0c      	ldr	r4, [pc, #48]	; (8004850 <__libc_init_array+0x44>)
 8004820:	f000 f82c 	bl	800487c <_init>
 8004824:	1ba4      	subs	r4, r4, r6
 8004826:	10a4      	asrs	r4, r4, #2
 8004828:	2500      	movs	r5, #0
 800482a:	42a5      	cmp	r5, r4
 800482c:	d105      	bne.n	800483a <__libc_init_array+0x2e>
 800482e:	bd70      	pop	{r4, r5, r6, pc}
 8004830:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004834:	4798      	blx	r3
 8004836:	3501      	adds	r5, #1
 8004838:	e7ee      	b.n	8004818 <__libc_init_array+0xc>
 800483a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800483e:	4798      	blx	r3
 8004840:	3501      	adds	r5, #1
 8004842:	e7f2      	b.n	800482a <__libc_init_array+0x1e>
 8004844:	08004990 	.word	0x08004990
 8004848:	08004990 	.word	0x08004990
 800484c:	08004990 	.word	0x08004990
 8004850:	08004994 	.word	0x08004994

08004854 <memcpy>:
 8004854:	b510      	push	{r4, lr}
 8004856:	1e43      	subs	r3, r0, #1
 8004858:	440a      	add	r2, r1
 800485a:	4291      	cmp	r1, r2
 800485c:	d100      	bne.n	8004860 <memcpy+0xc>
 800485e:	bd10      	pop	{r4, pc}
 8004860:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004864:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004868:	e7f7      	b.n	800485a <memcpy+0x6>

0800486a <memset>:
 800486a:	4402      	add	r2, r0
 800486c:	4603      	mov	r3, r0
 800486e:	4293      	cmp	r3, r2
 8004870:	d100      	bne.n	8004874 <memset+0xa>
 8004872:	4770      	bx	lr
 8004874:	f803 1b01 	strb.w	r1, [r3], #1
 8004878:	e7f9      	b.n	800486e <memset+0x4>
	...

0800487c <_init>:
 800487c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800487e:	bf00      	nop
 8004880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004882:	bc08      	pop	{r3}
 8004884:	469e      	mov	lr, r3
 8004886:	4770      	bx	lr

08004888 <_fini>:
 8004888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800488a:	bf00      	nop
 800488c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800488e:	bc08      	pop	{r3}
 8004890:	469e      	mov	lr, r3
 8004892:	4770      	bx	lr
